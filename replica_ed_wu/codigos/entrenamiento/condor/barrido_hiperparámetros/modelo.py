# -*- coding: utf-8 -*-

# importamos los modulos necesarios 
import torch.nn as nn 
from torch import nn as nn
import torch 
import torchvision 

# INICIO ESCRITO A MANO 
class SuperResolutionNet(nn.Module):
    def __init__(self):
        super().__init__()
        self.identidad = nn.Identity() 
        self.relu = nn.ReLU()
        self.sigmoid = nn.Sigmoid()
        #self.resize = nn.functional.interpolate(scale_factor=[1,1,2,2,2],mode='linear') 
        self.globalaveragepool = nn.AvgPool3d(kernel_size=(14,60,60)) 
        self.globalaveragepool2 = nn.AvgPool3d(kernel_size=(7,30,30))
        self.globalaveragepool3 = nn.AvgPool3d(kernel_size=(28,120,120))
        self.globalmaxpool = nn.MaxPool3d(kernel_size=(28,120,120))
        
        self.conv0 = nn.Conv3d(1, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        # FIN ESCRITO A MANO 
        
        #### 1º patrón

        self.conv1 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu0 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv2 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))

        self.conv3 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu1 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv4 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))

        self.conv5 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu2 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv6 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))

        self.conv7 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu3 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv8 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))

        self.conv9 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu4 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv10 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))

        self.convRG1 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        #fin RG

        self.conv11 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu5 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv12 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))

        self.conv13 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu6 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv14 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))

        self.conv15 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu7 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv16 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))

        self.conv17 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu8 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv18 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))

        self.conv19 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu9 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv20 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))

        self.convRG2 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        #fin RG 
        
        #### 2º patrón  

        #------------------------------------------------------
        self.iconvRG1 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
        self.ilrRG1 = nn.LeakyReLU(negative_slope=0.10000000149011612)


        #inicio mRCAB
        self.conv21 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu10 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv22 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.conv23 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu11 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.maxpool0 = nn.MaxPool3d(kernel_size=(14,60,60), stride=(14,60,60), padding=(0, 0, 0), dilation=1, ceil_mode=False)
        self.conv25 = nn.Conv3d(128, 16, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv26 = nn.Conv3d(16, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv24 = nn.Conv3d(64, 8, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv27 = nn.Conv3d(8, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))

        #inicio mRCAB
        self.conv28 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu12 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv29 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.conv30 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu13 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.maxpool1 = nn.MaxPool3d(kernel_size=(14,60,60), stride=(14,60,60), padding=(0, 0, 0), dilation=1, ceil_mode=False)
        self.conv32 = nn.Conv3d(128, 16, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv33 = nn.Conv3d(16, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv31 = nn.Conv3d(64, 8, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv34 = nn.Conv3d(8, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))

        #inicio mRCAB
        self.conv35 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu14 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv36 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.conv37 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu15 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.maxpool2 = nn.MaxPool3d(kernel_size=(14,60,60), stride=(14,60,60), padding=(0, 0, 0), dilation=1, ceil_mode=False)
        self.conv39 = nn.Conv3d(128, 16, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv40 = nn.Conv3d(16, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv38 = nn.Conv3d(64, 8, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv41 = nn.Conv3d(8, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))

        #inicio mRCAB
        self.conv42 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu16 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv43 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.conv44 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu17 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.maxpool3 = nn.MaxPool3d(kernel_size=(14,60,60), stride=(14,60,60), padding=(0, 0, 0), dilation=1, ceil_mode=False)
        self.conv46 = nn.Conv3d(128, 16, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv47 = nn.Conv3d(16, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv45 = nn.Conv3d(64, 8, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv48 = nn.Conv3d(8, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))

        #inicio mRCAB
        self.conv49 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu18 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv50 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.conv51 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu19 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.maxpool4 = nn.MaxPool3d(kernel_size=(14,60,60), stride=(14,60,60), padding=(0, 0, 0), dilation=1, ceil_mode=False)
        self.conv53 = nn.Conv3d(128, 16, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv54 = nn.Conv3d(16, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv52 = nn.Conv3d(64, 8, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv55 = nn.Conv3d(8, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))

        #inicio mRCAB
        self.conv56 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu20 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv57 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.conv58 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu21 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.maxpool5 = nn.MaxPool3d(kernel_size=(14,60,60), stride=(14,60,60), padding=(0, 0, 0), dilation=1, ceil_mode=False)
        self.conv60 = nn.Conv3d(128, 16, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv61 = nn.Conv3d(16, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv59 = nn.Conv3d(64, 8, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv62 = nn.Conv3d(8, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))

        #inicio mRCAB
        self.conv63 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu22 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv64 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.conv65 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu23 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.maxpool6 = nn.MaxPool3d(kernel_size=(14,60,60), stride=(14,60,60), padding=(0, 0, 0), dilation=1, ceil_mode=False)
        self.conv67 = nn.Conv3d(128, 16, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv68 = nn.Conv3d(16, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv66 = nn.Conv3d(64, 8, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv69 = nn.Conv3d(8, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))

        #inicio mRCAB
        self.conv70 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu24 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv71 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.conv72 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu25 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.maxpool7 = nn.MaxPool3d(kernel_size=(14,60,60), stride=(14,60,60), padding=(0, 0, 0), dilation=1, ceil_mode=False)
        self.conv74 = nn.Conv3d(128, 16, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv75 = nn.Conv3d(16, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv73 = nn.Conv3d(64, 8, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv76 = nn.Conv3d(8, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))

        #inicio mRCAB
        self.conv77 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu26 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv78 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.conv79 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu27 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.maxpool8 = nn.MaxPool3d(kernel_size=(14,60,60), stride=(14,60,60), padding=(0, 0, 0), dilation=1, ceil_mode=False)
        self.conv81 = nn.Conv3d(128, 16, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv82 = nn.Conv3d(16, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv80 = nn.Conv3d(64, 8, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv83 = nn.Conv3d(8, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))

        #inicio mRCAB
        self.conv84 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu28 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv85 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.conv86 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu29 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.maxpool9 = nn.MaxPool3d(kernel_size=(14,60,60), stride=(14,60,60), padding=(0, 0, 0), dilation=1, ceil_mode=False)
        self.conv88 = nn.Conv3d(128, 16, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv89 = nn.Conv3d(16, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv87 = nn.Conv3d(64, 8, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv90 = nn.Conv3d(8, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))

        self.convRG3 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        #fin RG

        #inicio mRCAB
        self.conv91 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu30 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv92 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.conv93 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu31 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.maxpool10 = nn.MaxPool3d(kernel_size=(14,60,60), stride=(14,60,60), padding=(0, 0, 0), dilation=1, ceil_mode=False)
        self.conv95 = nn.Conv3d(128, 16, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv96 = nn.Conv3d(16, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv94 = nn.Conv3d(64, 8, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv97 = nn.Conv3d(8, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))

        #inicio mRCAB
        self.conv98 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu32 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv99 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.conv100 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu33 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.maxpool11 = nn.MaxPool3d(kernel_size=(14,60,60), stride=(14,60,60), padding=(0, 0, 0), dilation=1, ceil_mode=False)
        self.conv102 = nn.Conv3d(128, 16, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv103 = nn.Conv3d(16, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv101 = nn.Conv3d(64, 8, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv104 = nn.Conv3d(8, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))

        #inicio mRCAB
        self.conv105 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu34 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv106 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.conv107 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu35 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.maxpool12 = nn.MaxPool3d(kernel_size=(14,60,60), stride=(14,60,60), padding=(0, 0, 0), dilation=1, ceil_mode=False)
        self.conv109 = nn.Conv3d(128, 16, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv110 = nn.Conv3d(16, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv108 = nn.Conv3d(64, 8, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv111 = nn.Conv3d(8, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))

        #inicio mRCAB
        self.conv112 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu36 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv113 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.conv114 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu37 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.maxpool13 = nn.MaxPool3d(kernel_size=(14,60,60), stride=(14,60,60), padding=(0, 0, 0), dilation=1, ceil_mode=False)
        self.conv116 = nn.Conv3d(128, 16, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv117 = nn.Conv3d(16, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv115 = nn.Conv3d(64, 8, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv118 = nn.Conv3d(8, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))

        #inicio mRCAB
        self.conv119 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu38 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv120 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.conv121 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu39 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.maxpool14 = nn.MaxPool3d(kernel_size=(14,60,60), stride=(14,60,60), padding=(0, 0, 0), dilation=1, ceil_mode=False)
        self.conv123 = nn.Conv3d(128, 16, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv124 = nn.Conv3d(16, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv122 = nn.Conv3d(64, 8, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv125 = nn.Conv3d(8, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))

        #inicio mRCAB
        self.conv126 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu40 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv127 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.conv128 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu41 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.maxpool15 = nn.MaxPool3d(kernel_size=(14,60,60), stride=(14,60,60), padding=(0, 0, 0), dilation=1, ceil_mode=False)
        self.conv130 = nn.Conv3d(128, 16, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv131 = nn.Conv3d(16, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv129 = nn.Conv3d(64, 8, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv132 = nn.Conv3d(8, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))

        #inicio mRCAB
        self.conv133 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu42 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv134 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.conv135 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu43 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.maxpool16 = nn.MaxPool3d(kernel_size=(14,60,60), stride=(14,60,60), padding=(0, 0, 0), dilation=1, ceil_mode=False)
        self.conv137 = nn.Conv3d(128, 16, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv138 = nn.Conv3d(16, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv136 = nn.Conv3d(64, 8, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv139 = nn.Conv3d(8, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))

        #inicio mRCAB
        self.conv140 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu44 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv141 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.conv142 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu45 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.maxpool17 = nn.MaxPool3d(kernel_size=(14,60,60), stride=(14,60,60), padding=(0, 0, 0), dilation=1, ceil_mode=False)
        self.conv144 = nn.Conv3d(128, 16, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv145 = nn.Conv3d(16, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv143 = nn.Conv3d(64, 8, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv146 = nn.Conv3d(8, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))

        #inicio mRCAB
        self.conv147 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu46 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv148 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.conv149 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu47 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.maxpool18 = nn.MaxPool3d(kernel_size=(14,60,60), stride=(14,60,60), padding=(0, 0, 0), dilation=1, ceil_mode=False)
        self.conv151 = nn.Conv3d(128, 16, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv152 = nn.Conv3d(16, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv150 = nn.Conv3d(64, 8, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv153 = nn.Conv3d(8, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))

        #inicio mRCAB
        self.conv154 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu48 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv155 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.conv156 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu49 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.maxpool19 = nn.MaxPool3d(kernel_size=(14,60,60), stride=(14,60,60), padding=(0, 0, 0), dilation=1, ceil_mode=False)
        self.conv158 = nn.Conv3d(128, 16, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv159 = nn.Conv3d(16, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv157 = nn.Conv3d(64, 8, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv160 = nn.Conv3d(8, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))

        self.convRG4 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        #fin RG

        #------------------------------------------------------
        self.iconvRG2 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
        self.ilrRG2 = nn.LeakyReLU(negative_slope=0.10000000149011612)


        #inicio mRCAB
        self.conv161 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu50 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv162 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.conv163 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu51 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        #self.maxpool20 = nn.MaxPool3d(kernel_size=(7,30,30), stride=(7,30,30), padding=(0, 0, 0), dilation=1, ceil_mode=False)
        self.maxpool20 = nn.MaxPool3d(kernel_size=(7,30,30), stride=(7,30,30), padding=(0, 0, 0), dilation=1, ceil_mode=False)
        self.conv165 = nn.Conv3d(128, 16, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv166 = nn.Conv3d(16, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv164 = nn.Conv3d(64, 8, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv167 = nn.Conv3d(8, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))

        #inicio mRCAB
        self.conv168 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu52 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv169 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.conv170 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu53 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.maxpool21 = nn.MaxPool3d(kernel_size=(7,30,30), stride=(7,30,30), padding=(0, 0, 0), dilation=1, ceil_mode=False)
        self.conv172 = nn.Conv3d(128, 16, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv173 = nn.Conv3d(16, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv171 = nn.Conv3d(64, 8, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv174 = nn.Conv3d(8, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))

        #inicio mRCAB
        self.conv175 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu54 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv176 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.conv177 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu55 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.maxpool22 = nn.MaxPool3d(kernel_size=(7,30,30), stride=(7,30,30), padding=(0, 0, 0), dilation=1, ceil_mode=False)
        self.conv179 = nn.Conv3d(128, 16, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv180 = nn.Conv3d(16, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv178 = nn.Conv3d(64, 8, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv181 = nn.Conv3d(8, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))

        #inicio mRCAB
        self.conv182 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu56 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv183 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.conv184 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu57 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.maxpool23 = nn.MaxPool3d(kernel_size=(7,30,30), stride=(7,30,30), padding=(0, 0, 0), dilation=1, ceil_mode=False)
        self.conv186 = nn.Conv3d(128, 16, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv187 = nn.Conv3d(16, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv185 = nn.Conv3d(64, 8, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv188 = nn.Conv3d(8, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))

        #inicio mRCAB
        self.conv189 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu58 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv190 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.conv191 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu59 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.maxpool24 = nn.MaxPool3d(kernel_size=(7,30,30), stride=(7,30,30), padding=(0, 0, 0), dilation=1, ceil_mode=False)
        self.conv193 = nn.Conv3d(128, 16, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv194 = nn.Conv3d(16, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv192 = nn.Conv3d(64, 8, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv195 = nn.Conv3d(8, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))

        #inicio mRCAB
        self.conv196 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu60 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv197 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.conv198 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu61 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.maxpool25 = nn.MaxPool3d(kernel_size=(7,30,30), stride=(7,30,30), padding=(0, 0, 0), dilation=1, ceil_mode=False)
        self.conv200 = nn.Conv3d(128, 16, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv201 = nn.Conv3d(16, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv199 = nn.Conv3d(64, 8, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv202 = nn.Conv3d(8, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))

        #inicio mRCAB
        self.conv203 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu62 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv204 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.conv205 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu63 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.maxpool26 = nn.MaxPool3d(kernel_size=(7,30,30), stride=(7,30,30), padding=(0, 0, 0), dilation=1, ceil_mode=False)
        self.conv207 = nn.Conv3d(128, 16, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv208 = nn.Conv3d(16, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv206 = nn.Conv3d(64, 8, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv209 = nn.Conv3d(8, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))

        #inicio mRCAB
        self.conv210 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu64 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv211 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.conv212 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu65 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.maxpool27 = nn.MaxPool3d(kernel_size=(7,30,30), stride=(7,30,30), padding=(0, 0, 0), dilation=1, ceil_mode=False)
        self.conv214 = nn.Conv3d(128, 16, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv215 = nn.Conv3d(16, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv213 = nn.Conv3d(64, 8, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv216 = nn.Conv3d(8, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))

        #inicio mRCAB
        self.conv217 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu66 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv218 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.conv219 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu67 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.maxpool28 = nn.MaxPool3d(kernel_size=(7,30,30), stride=(7,30,30), padding=(0, 0, 0), dilation=1, ceil_mode=False)
        self.conv221 = nn.Conv3d(128, 16, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv222 = nn.Conv3d(16, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv220 = nn.Conv3d(64, 8, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv223 = nn.Conv3d(8, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))

        #inicio mRCAB
        self.conv224 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu68 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv225 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.conv226 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu69 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.maxpool29 = nn.MaxPool3d(kernel_size=(7,30,30), stride=(7,30,30), padding=(0, 0, 0), dilation=1, ceil_mode=False)
        self.conv228 = nn.Conv3d(128, 16, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv229 = nn.Conv3d(16, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv227 = nn.Conv3d(64, 8, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv230 = nn.Conv3d(8, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))

        self.convRG5 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        #fin RG

        #inicio mRCAB
        self.conv231 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu70 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv232 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.conv233 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu71 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.maxpool30 = nn.MaxPool3d(kernel_size=(7,30,30), stride=(7,30,30), padding=(0, 0, 0), dilation=1, ceil_mode=False)
        self.conv235 = nn.Conv3d(128, 16, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv236 = nn.Conv3d(16, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv234 = nn.Conv3d(64, 8, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv237 = nn.Conv3d(8, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))

        #inicio mRCAB
        self.conv238 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu72 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv239 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.conv240 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu73 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.maxpool31 = nn.MaxPool3d(kernel_size=(7,30,30), stride=(7,30,30), padding=(0, 0, 0), dilation=1, ceil_mode=False)
        self.conv242 = nn.Conv3d(128, 16, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv243 = nn.Conv3d(16, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv241 = nn.Conv3d(64, 8, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv244 = nn.Conv3d(8, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))

        #inicio mRCAB
        self.conv245 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu74 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv246 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.conv247 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu75 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.maxpool32 = nn.MaxPool3d(kernel_size=(7,30,30), stride=(7,30,30), padding=(0, 0, 0), dilation=1, ceil_mode=False)
        self.conv249 = nn.Conv3d(128, 16, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv250 = nn.Conv3d(16, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv248 = nn.Conv3d(64, 8, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv251 = nn.Conv3d(8, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))

        #inicio mRCAB
        self.conv252 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu76 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv253 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.conv254 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu77 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.maxpool33 = nn.MaxPool3d(kernel_size=(7,30,30), stride=(7,30,30), padding=(0, 0, 0), dilation=1, ceil_mode=False)
        self.conv256 = nn.Conv3d(128, 16, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv257 = nn.Conv3d(16, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv255 = nn.Conv3d(64, 8, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv258 = nn.Conv3d(8, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))

        #inicio mRCAB
        self.conv259 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu78 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv260 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.conv261 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu79 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.maxpool34 = nn.MaxPool3d(kernel_size=(7,30,30), stride=(7,30,30), padding=(0, 0, 0), dilation=1, ceil_mode=False)
        self.conv263 = nn.Conv3d(128, 16, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv264 = nn.Conv3d(16, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv262 = nn.Conv3d(64, 8, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv265 = nn.Conv3d(8, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))

        #inicio mRCAB
        self.conv266 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu80 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv267 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.conv268 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu81 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.maxpool35 = nn.MaxPool3d(kernel_size=(7,30,30), stride=(7,30,30), padding=(0, 0, 0), dilation=1, ceil_mode=False)
        self.conv270 = nn.Conv3d(128, 16, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv271 = nn.Conv3d(16, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv269 = nn.Conv3d(64, 8, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv272 = nn.Conv3d(8, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))

        #inicio mRCAB
        self.conv273 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu82 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv274 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.conv275 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu83 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.maxpool36 = nn.MaxPool3d(kernel_size=(7,30,30), stride=(7,30,30), padding=(0, 0, 0), dilation=1, ceil_mode=False)
        self.conv277 = nn.Conv3d(128, 16, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv278 = nn.Conv3d(16, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv276 = nn.Conv3d(64, 8, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv279 = nn.Conv3d(8, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))

        #inicio mRCAB
        self.conv280 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu84 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv281 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.conv282 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu85 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.maxpool37 = nn.MaxPool3d(kernel_size=(7,30,30), stride=(7,30,30), padding=(0, 0, 0), dilation=1, ceil_mode=False)
        self.conv284 = nn.Conv3d(128, 16, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv285 = nn.Conv3d(16, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv283 = nn.Conv3d(64, 8, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv286 = nn.Conv3d(8, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))

        #inicio mRCAB
        self.conv287 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu86 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv288 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.conv289 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu87 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.maxpool38 = nn.MaxPool3d(kernel_size=(7,30,30), stride=(7,30,30), padding=(0, 0, 0), dilation=1, ceil_mode=False)
        self.conv291 = nn.Conv3d(128, 16, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv292 = nn.Conv3d(16, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv290 = nn.Conv3d(64, 8, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv293 = nn.Conv3d(8, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))

        #inicio mRCAB
        self.conv294 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu88 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv295 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.conv296 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu89 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.maxpool39 = nn.MaxPool3d(kernel_size=(7,30,30), stride=(7,30,30), padding=(0, 0, 0), dilation=1, ceil_mode=False)
        self.conv298 = nn.Conv3d(128, 16, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv299 = nn.Conv3d(16, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv297 = nn.Conv3d(64, 8, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv300 = nn.Conv3d(8, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))

        self.convRG6 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        #fin RG

        #------------------------------------------------------
        self.iconvRG3 = nn.Conv3d(128, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.ilrRG3 = nn.LeakyReLU(negative_slope=0.10000000149011612)


        #inicio mRCAB
        self.conv301 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu90 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv302 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.conv303 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu91 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.maxpool40 = nn.MaxPool3d(kernel_size=(14,60,60), stride=(14,60,60), padding=(0, 0, 0), dilation=1, ceil_mode=False)
        self.conv305 = nn.Conv3d(128, 16, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv306 = nn.Conv3d(16, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv304 = nn.Conv3d(64, 8, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv307 = nn.Conv3d(8, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))

        #inicio mRCAB
        self.conv308 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu92 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv309 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.conv310 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu93 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.maxpool41 = nn.MaxPool3d(kernel_size=(14,60,60), stride=(14,60,60), padding=(0, 0, 0), dilation=1, ceil_mode=False)
        self.conv312 = nn.Conv3d(128, 16, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv313 = nn.Conv3d(16, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv311 = nn.Conv3d(64, 8, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv314 = nn.Conv3d(8, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))

        #inicio mRCAB
        self.conv315 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu94 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv316 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.conv317 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu95 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.maxpool42 = nn.MaxPool3d(kernel_size=(14,60,60), stride=(14,60,60), padding=(0, 0, 0), dilation=1, ceil_mode=False)
        self.conv319 = nn.Conv3d(128, 16, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv320 = nn.Conv3d(16, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv318 = nn.Conv3d(64, 8, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv321 = nn.Conv3d(8, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))

        #inicio mRCAB
        self.conv322 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu96 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv323 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.conv324 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu97 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.maxpool43 = nn.MaxPool3d(kernel_size=(14,60,60), stride=(14,60,60), padding=(0, 0, 0), dilation=1, ceil_mode=False)
        self.conv326 = nn.Conv3d(128, 16, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv327 = nn.Conv3d(16, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv325 = nn.Conv3d(64, 8, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv328 = nn.Conv3d(8, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))

        #inicio mRCAB
        self.conv329 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu98 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv330 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.conv331 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu99 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.maxpool44 = nn.MaxPool3d(kernel_size=(14,60,60), stride=(14,60,60), padding=(0, 0, 0), dilation=1, ceil_mode=False)
        self.conv333 = nn.Conv3d(128, 16, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv334 = nn.Conv3d(16, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv332 = nn.Conv3d(64, 8, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv335 = nn.Conv3d(8, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))

        #inicio mRCAB
        self.conv336 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu100 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv337 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.conv338 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu101 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.maxpool45 = nn.MaxPool3d(kernel_size=(14,60,60), stride=(14,60,60), padding=(0, 0, 0), dilation=1, ceil_mode=False)
        self.conv340 = nn.Conv3d(128, 16, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv341 = nn.Conv3d(16, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv339 = nn.Conv3d(64, 8, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv342 = nn.Conv3d(8, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))

        #inicio mRCAB
        self.conv343 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu102 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv344 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.conv345 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu103 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.maxpool46 = nn.MaxPool3d(kernel_size=(14,60,60), stride=(14,60,60), padding=(0, 0, 0), dilation=1, ceil_mode=False)
        self.conv347 = nn.Conv3d(128, 16, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv348 = nn.Conv3d(16, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv346 = nn.Conv3d(64, 8, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv349 = nn.Conv3d(8, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))

        #inicio mRCAB
        self.conv350 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu104 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv351 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.conv352 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu105 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.maxpool47 = nn.MaxPool3d(kernel_size=(14,60,60), stride=(14,60,60), padding=(0, 0, 0), dilation=1, ceil_mode=False)
        self.conv354 = nn.Conv3d(128, 16, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv355 = nn.Conv3d(16, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv353 = nn.Conv3d(64, 8, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv356 = nn.Conv3d(8, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))

        #inicio mRCAB
        self.conv357 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu106 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv358 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.conv359 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu107 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.maxpool48 = nn.MaxPool3d(kernel_size=(14,60,60), stride=(14,60,60), padding=(0, 0, 0), dilation=1, ceil_mode=False)
        self.conv361 = nn.Conv3d(128, 16, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv362 = nn.Conv3d(16, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv360 = nn.Conv3d(64, 8, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv363 = nn.Conv3d(8, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))

        #inicio mRCAB
        self.conv364 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu108 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv365 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.conv366 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu109 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.maxpool49 = nn.MaxPool3d(kernel_size=(14,60,60), stride=(14,60,60), padding=(0, 0, 0), dilation=1, ceil_mode=False)
        self.conv368 = nn.Conv3d(128, 16, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv369 = nn.Conv3d(16, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv367 = nn.Conv3d(64, 8, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv370 = nn.Conv3d(8, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))

        self.convRG7 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        #fin RG

        #inicio mRCAB
        self.conv371 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu110 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv372 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.conv373 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu111 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.maxpool50 = nn.MaxPool3d(kernel_size=(14,60,60), stride=(14,60,60), padding=(0, 0, 0), dilation=1, ceil_mode=False)
        self.conv375 = nn.Conv3d(128, 16, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv376 = nn.Conv3d(16, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv374 = nn.Conv3d(64, 8, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv377 = nn.Conv3d(8, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))

        #inicio mRCAB
        self.conv378 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu112 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv379 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.conv380 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu113 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.maxpool51 = nn.MaxPool3d(kernel_size=(14,60,60), stride=(14,60,60), padding=(0, 0, 0), dilation=1, ceil_mode=False)
        self.conv382 = nn.Conv3d(128, 16, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv383 = nn.Conv3d(16, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv381 = nn.Conv3d(64, 8, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv384 = nn.Conv3d(8, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))

        #inicio mRCAB
        self.conv385 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu114 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv386 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.conv387 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu115 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.maxpool52 = nn.MaxPool3d(kernel_size=(14,60,60), stride=(14,60,60), padding=(0, 0, 0), dilation=1, ceil_mode=False)
        self.conv389 = nn.Conv3d(128, 16, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv390 = nn.Conv3d(16, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv388 = nn.Conv3d(64, 8, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv391 = nn.Conv3d(8, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))

        #inicio mRCAB
        self.conv392 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu116 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv393 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.conv394 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu117 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.maxpool53 = nn.MaxPool3d(kernel_size=(14,60,60), stride=(14,60,60), padding=(0, 0, 0), dilation=1, ceil_mode=False)
        self.conv396 = nn.Conv3d(128, 16, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv397 = nn.Conv3d(16, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv395 = nn.Conv3d(64, 8, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv398 = nn.Conv3d(8, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))

        #inicio mRCAB
        self.conv399 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu118 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv400 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.conv401 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu119 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.maxpool54 = nn.MaxPool3d(kernel_size=(14,60,60), stride=(14,60,60), padding=(0, 0, 0), dilation=1, ceil_mode=False)
        self.conv403 = nn.Conv3d(128, 16, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv404 = nn.Conv3d(16, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv402 = nn.Conv3d(64, 8, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv405 = nn.Conv3d(8, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))

        #inicio mRCAB
        self.conv406 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu120 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv407 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.conv408 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu121 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.maxpool55 = nn.MaxPool3d(kernel_size=(14,60,60), stride=(14,60,60), padding=(0, 0, 0), dilation=1, ceil_mode=False)
        self.conv410 = nn.Conv3d(128, 16, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv411 = nn.Conv3d(16, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv409 = nn.Conv3d(64, 8, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv412 = nn.Conv3d(8, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))

        #inicio mRCAB
        self.conv413 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu122 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv414 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.conv415 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu123 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.maxpool56 = nn.MaxPool3d(kernel_size=(14,60,60), stride=(14,60,60), padding=(0, 0, 0), dilation=1, ceil_mode=False)
        self.conv417 = nn.Conv3d(128, 16, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv418 = nn.Conv3d(16, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv416 = nn.Conv3d(64, 8, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv419 = nn.Conv3d(8, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))

        #inicio mRCAB
        self.conv420 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu124 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv421 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.conv422 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu125 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.maxpool57 = nn.MaxPool3d(kernel_size=(14,60,60), stride=(14,60,60), padding=(0, 0, 0), dilation=1, ceil_mode=False)
        self.conv424 = nn.Conv3d(128, 16, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv425 = nn.Conv3d(16, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv423 = nn.Conv3d(64, 8, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv426 = nn.Conv3d(8, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))

        #inicio mRCAB
        self.conv427 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu126 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv428 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.conv429 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu127 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.maxpool58 = nn.MaxPool3d(kernel_size=(14,60,60), stride=(14,60,60), padding=(0, 0, 0), dilation=1, ceil_mode=False)
        self.conv431 = nn.Conv3d(128, 16, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv432 = nn.Conv3d(16, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv430 = nn.Conv3d(64, 8, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv433 = nn.Conv3d(8, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))

        #inicio mRCAB
        self.conv434 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu128 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv435 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.conv436 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu129 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.maxpool59 = nn.MaxPool3d(kernel_size=(14,60,60), stride=(14,60,60), padding=(0, 0, 0), dilation=1, ceil_mode=False)
        self.conv438 = nn.Conv3d(128, 16, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv439 = nn.Conv3d(16, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv437 = nn.Conv3d(64, 8, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv440 = nn.Conv3d(8, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))

        self.convRG8 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        #fin RG

        #------------------------------------------------------
        self.iconvRG4 = nn.Conv3d(128, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.ilrRG4 = nn.LeakyReLU(negative_slope=0.10000000149011612)

        # A MANO 
        self.conv441 = nn.Conv3d(64,64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu130 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        #self.pad = torchvision.transforms.Pad(padding=torch.tensor([0,0,1,1,1,0,0,1,1,1]), fill=0, padding_mode='constant')
        #self.pad = torchvision.transforms.Pad(padding=[0,0,1,1,1,0,0,1,1,1], fill=0, padding_mode='constant')
        self.pad = torchvision.transforms.Pad(padding=[1,1,1,1], fill=0, padding_mode='constant')
        #self.averagepool = nn.AvgPool3d(kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(0, 0, 0), ceil_mode=False) 
        self.averagepool = nn.AvgPool3d(kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1,0,0), ceil_mode=False) 
        self.maxpool60 = nn.MaxPool3d(kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), dilation=1, ceil_mode=False)
        self.conv442 = nn.Conv3d(128,64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu131 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv443 = nn.Conv3d(64,64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu132 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv444 = nn.Conv3d(64,64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu133 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv445 = nn.Conv3d(64,64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu134 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv446 = nn.Conv3d(64,64, kernel_size=(1, 1, 1), stride=(1, 1, 1), padding=(0, 0, 0))
        self.leackyrelu135 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv447 = nn.Conv3d(64,64, kernel_size=(1, 1, 1), stride=(1, 1, 1), padding=(0, 0, 0))
        self.leackyrelu136 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv448 = nn.Conv3d(64,64, kernel_size=(1, 1, 1), stride=(1, 1, 1), padding=(0, 0, 0))
        self.leackyrelu137 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv449 = nn.Conv3d(64,64, kernel_size=(1, 1, 1), stride=(1, 1, 1), padding=(0, 0, 0))
        # FIN A MANO 
        
        
        #inicio mRCAB
        self.conv450 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu138 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv451 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.conv452 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu139 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv454 = nn.Conv3d(128, 16, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv455 = nn.Conv3d(16, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv453 = nn.Conv3d(64, 8, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv456 = nn.Conv3d(8, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))

        #inicio mRCAB
        self.conv457 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu140 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv458 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.conv459 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu141 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv461 = nn.Conv3d(128, 16, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv462 = nn.Conv3d(16, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv460 = nn.Conv3d(64, 8, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv463 = nn.Conv3d(8, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))

        #inicio mRCAB
        self.conv464 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu142 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv465 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.conv466 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu143 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv468 = nn.Conv3d(128, 16, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv469 = nn.Conv3d(16, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv467 = nn.Conv3d(64, 8, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv470 = nn.Conv3d(8, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))

        #inicio mRCAB
        self.conv471 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu144 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv472 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.conv473 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu145 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv475 = nn.Conv3d(128, 16, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv476 = nn.Conv3d(16, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv474 = nn.Conv3d(64, 8, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv477 = nn.Conv3d(8, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))

        #inicio mRCAB
        self.conv478 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu146 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv479 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.conv480 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu147 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv482 = nn.Conv3d(128, 16, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv483 = nn.Conv3d(16, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv481 = nn.Conv3d(64, 8, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv484 = nn.Conv3d(8, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))

        self.convRG9 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        #fin RG

        #inicio mRCAB
        self.conv485 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu148 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv486 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.conv487 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu149 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv489 = nn.Conv3d(128, 16, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv490 = nn.Conv3d(16, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv488 = nn.Conv3d(64, 8, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv491 = nn.Conv3d(8, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))

        #inicio mRCAB
        self.conv492 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu150 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv493 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.conv494 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu151 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv496 = nn.Conv3d(128, 16, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv497 = nn.Conv3d(16, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv495 = nn.Conv3d(64, 8, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv498 = nn.Conv3d(8, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))

        #inicio mRCAB
        self.conv499 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu152 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv500 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.conv501 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu153 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv503 = nn.Conv3d(128, 16, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv504 = nn.Conv3d(16, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv502 = nn.Conv3d(64, 8, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv505 = nn.Conv3d(8, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))

        #inicio mRCAB
        self.conv506 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu154 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv507 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.conv508 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu155 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv510 = nn.Conv3d(128, 16, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv511 = nn.Conv3d(16, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv509 = nn.Conv3d(64, 8, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv512 = nn.Conv3d(8, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))

        #inicio mRCAB
        self.conv513 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu156 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv514 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.conv515 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu157 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv517 = nn.Conv3d(128, 16, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv518 = nn.Conv3d(16, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv516 = nn.Conv3d(64, 8, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv519 = nn.Conv3d(8, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))

        self.convRG10 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        #fin RG

        #inicio mRCAB
        self.conv520 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu158 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv521 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.conv522 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu159 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv524 = nn.Conv3d(128, 16, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv525 = nn.Conv3d(16, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv523 = nn.Conv3d(64, 8, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv526 = nn.Conv3d(8, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))

        #inicio mRCAB
        self.conv527 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu160 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv528 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.conv529 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu161 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv531 = nn.Conv3d(128, 16, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv532 = nn.Conv3d(16, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv530 = nn.Conv3d(64, 8, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv533 = nn.Conv3d(8, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))

        #inicio mRCAB
        self.conv534 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu162 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv535 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.conv536 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu163 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv538 = nn.Conv3d(128, 16, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv539 = nn.Conv3d(16, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv537 = nn.Conv3d(64, 8, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv540 = nn.Conv3d(8, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))

        #inicio mRCAB
        self.conv541 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu164 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv542 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.conv543 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu165 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv545 = nn.Conv3d(128, 16, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv546 = nn.Conv3d(16, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv544 = nn.Conv3d(64, 8, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv547 = nn.Conv3d(8, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))

        #inicio mRCAB
        self.conv548 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu166 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv549 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.conv550 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu167 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv552 = nn.Conv3d(128, 16, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv553 = nn.Conv3d(16, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv551 = nn.Conv3d(64, 8, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv554 = nn.Conv3d(8, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))

        self.convRG11 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        #fin RG

        #inicio mRCAB
        self.conv555 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu168 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv556 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.conv557 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu169 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv559 = nn.Conv3d(128, 16, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv560 = nn.Conv3d(16, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv558 = nn.Conv3d(64, 8, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv561 = nn.Conv3d(8, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))

        #inicio mRCAB
        self.conv562 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu170 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv563 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.conv564 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu171 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv566 = nn.Conv3d(128, 16, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv567 = nn.Conv3d(16, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv565 = nn.Conv3d(64, 8, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv568 = nn.Conv3d(8, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))

        #inicio mRCAB
        self.conv569 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu172 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv570 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.conv571 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu173 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv573 = nn.Conv3d(128, 16, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv574 = nn.Conv3d(16, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv572 = nn.Conv3d(64, 8, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv575 = nn.Conv3d(8, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))

        #inicio mRCAB
        self.conv576 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu174 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv577 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.conv578 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu175 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv580 = nn.Conv3d(128, 16, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv581 = nn.Conv3d(16, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv579 = nn.Conv3d(64, 8, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv582 = nn.Conv3d(8, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))

        #inicio mRCAB
        self.conv583 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu176 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv584 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.conv585 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.leackyrelu177 = nn.LeakyReLU(negative_slope=0.10000000149011612)
        self.conv587 = nn.Conv3d(128, 16, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv588 = nn.Conv3d(16, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv586 = nn.Conv3d(64, 8, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        self.conv589 = nn.Conv3d(8, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))

        self.convRG12 = nn.Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        #fin RG
        
        # ESCRITO A MANO
        self.conv590 = nn.Conv3d(64,512, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.conv591 = nn.Conv3d(64, 1, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.conv592 = nn.Conv3d(1, 512, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.conv593 = nn.Conv3d(64, 1, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1)) 
        
        self.to("cuda")
        
        
        
    def forward(self, x):
        
        ID_final = self.identidad(x)
        x = self.conv0(x)
        x = self.relu(x) 
        
        ID = self.identidad(x)

        res = self.conv1(x)
        res = self.leackyrelu0(res)
        res = self.conv2(res)
        x = torch.add(res, self.identidad(x))

        res = self.conv3(x)
        res = self.leackyrelu1(res)
        res = self.conv4(res)
        x = torch.add(res, self.identidad(x))

        res = self.conv5(x)
        res = self.leackyrelu2(res)
        res = self.conv6(res)
        x = torch.add(res, self.identidad(x))

        res = self.conv7(x)
        res = self.leackyrelu3(res)
        res = self.conv8(res)
        x = torch.add(res, self.identidad(x))

        res = self.conv9(x)
        res = self.leackyrelu4(res)
        res = self.conv10(res)
        x = torch.add(res, self.identidad(x))

        res = self.convRG1(x)
        x = torch.add(res, ID)

        ID = self.identidad(x)

        res = self.conv11(x)
        res = self.leackyrelu5(res)
        res = self.conv12(res)
        x = torch.add(res, self.identidad(x))

        res = self.conv13(x)
        res = self.leackyrelu6(res)
        res = self.conv14(res)
        x = torch.add(res, self.identidad(x))

        res = self.conv15(x)
        res = self.leackyrelu7(res)
        res = self.conv16(res)
        x = torch.add(res, self.identidad(x))

        res = self.conv17(x)
        res = self.leackyrelu8(res)
        res = self.conv18(res)
        x = torch.add(res, self.identidad(x))

        res = self.conv19(x)
        res = self.leackyrelu9(res)
        res = self.conv20(res)
        x = torch.add(res, self.identidad(x))

        res = self.convRG2(x)
        x = torch.add(res, ID)
        
        

        #inicio conexión 0-60
        id0_1 = self.identidad(x)
        id0_2 = self.identidad(x)
        x = self.iconvRG1(x)
        x = self.ilrRG1(x)

        # -- inicio cada10 -- 
        id10 = self.identidad(x)


        #inicio mRCAB
        id_ppo = self.identidad(x)
        res = self.conv21(x)
        res = self.leackyrelu10(res)
        res = self.conv22(res)
        res = self.conv23(res)
        res = self.leackyrelu11(res)
        #res1 = self.globalaveragepool(res.shape[:2])
        size = tuple(res[0,0,:,:,:].shape)
        #print(size) 
        res1 = self.globalaveragepool(res) 
        res2 = self.maxpool0(res)
        res3 = self.conv24(res)
        id_LR = self.identidad(res)
        res12 = torch.concat((res1,res2),1)
        res12 = self.conv25(res12)
        res12 = self.relu(res12)
        res12 = self.conv26(res12)
        res3 = self.relu(res3)
        res3 = self.conv27(res3)
        res = torch.add(res12,res3)
        res = self.sigmoid(res)
        res = torch.mul(res,id_LR)
        x = torch.add(id_ppo,res)
        #fin mRCAB 

        #inicio mRCAB
        id_ppo = self.identidad(x)
        res = self.conv28(x)
        res = self.leackyrelu12(res)
        res = self.conv29(res)
        res = self.conv30(res)
        res = self.leackyrelu13(res)
        #res1 = self.globalaveragepool(res.shape[:2])
        size = tuple(res[0,0,:,:,:].shape)
        #print(size) 
        res1 = self.globalaveragepool(res)
        res2 = self.maxpool1(res)
        res3 = self.conv31(res)
        id_LR = self.identidad(res)
        res12 = torch.concat((res1,res2),1)
        res12 = self.conv32(res12)
        res12 = self.relu(res12)
        res12 = self.conv33(res12)
        res3 = self.relu(res3)
        res3 = self.conv34(res3)
        res = torch.add(res12,res3)
        res = self.sigmoid(res)
        res = torch.mul(res,id_LR)
        x = torch.add(id_ppo,res)
        #fin mRCAB 

        #inicio mRCAB
        id_ppo = self.identidad(x)
        res = self.conv35(x)
        res = self.leackyrelu14(res)
        res = self.conv36(res)
        res = self.conv37(res)
        res = self.leackyrelu15(res)
        #res1 = self.globalaveragepool(res.shape[:2])
        size = tuple(res[0,0,:,:,:].shape)
        #print(size) 
        res1 = self.globalaveragepool(res)
        res2 = self.maxpool2(res)
        res3 = self.conv38(res)
        id_LR = self.identidad(res)
        res12 = torch.concat((res1,res2),1)
        res12 = self.conv39(res12)
        res12 = self.relu(res12)
        res12 = self.conv40(res12)
        res3 = self.relu(res3)
        res3 = self.conv41(res3)
        res = torch.add(res12,res3)
        res = self.sigmoid(res)
        res = torch.mul(res,id_LR)
        x = torch.add(id_ppo,res)
        #fin mRCAB 

        #inicio mRCAB
        id_ppo = self.identidad(x)
        res = self.conv42(x)
        res = self.leackyrelu16(res)
        res = self.conv43(res)
        res = self.conv44(res)
        res = self.leackyrelu17(res)
        #res1 = self.globalaveragepool(res.shape[:2])
        size = tuple(res[0,0,:,:,:].shape)
        #print(size) 
        res1 = self.globalaveragepool(res)
        res2 = self.maxpool3(res)
        res3 = self.conv45(res)
        id_LR = self.identidad(res)
        res12 = torch.concat((res1,res2),1)
        res12 = self.conv46(res12)
        res12 = self.relu(res12)
        res12 = self.conv47(res12)
        res3 = self.relu(res3)
        res3 = self.conv48(res3)
        res = torch.add(res12,res3)
        res = self.sigmoid(res)
        res = torch.mul(res,id_LR)
        x = torch.add(id_ppo,res)
        #fin mRCAB 

        #inicio mRCAB
        id_ppo = self.identidad(x)
        res = self.conv49(x)
        res = self.leackyrelu18(res)
        res = self.conv50(res)
        res = self.conv51(res)
        res = self.leackyrelu19(res)
        #res1 = self.globalaveragepool(res.shape[:2])
        size = tuple(res[0,0,:,:,:].shape)
        #print(size) 
        res1 = self.globalaveragepool(res)
        res2 = self.maxpool4(res)
        res3 = self.conv52(res)
        id_LR = self.identidad(res)
        res12 = torch.concat((res1,res2),1)
        res12 = self.conv53(res12)
        res12 = self.relu(res12)
        res12 = self.conv54(res12)
        res3 = self.relu(res3)
        res3 = self.conv55(res3)
        res = torch.add(res12,res3)
        res = self.sigmoid(res)
        res = torch.mul(res,id_LR)
        x = torch.add(id_ppo,res)
        #fin mRCAB 

        #inicio mRCAB
        id_ppo = self.identidad(x)
        res = self.conv56(x)
        res = self.leackyrelu20(res)
        res = self.conv57(res)
        res = self.conv58(res)
        res = self.leackyrelu21(res)
        #res1 = self.globalaveragepool(res.shape[:2])
        size = tuple(res[0,0,:,:,:].shape)
        #print(size) 
        res1 = self.globalaveragepool(res)
        res2 = self.maxpool5(res)
        res3 = self.conv59(res)
        id_LR = self.identidad(res)
        res12 = torch.concat((res1,res2),1)
        res12 = self.conv60(res12)
        res12 = self.relu(res12)
        res12 = self.conv61(res12)
        res3 = self.relu(res3)
        res3 = self.conv62(res3)
        res = torch.add(res12,res3)
        res = self.sigmoid(res)
        res = torch.mul(res,id_LR)
        x = torch.add(id_ppo,res)
        #fin mRCAB 

        #inicio mRCAB
        id_ppo = self.identidad(x)
        res = self.conv63(x)
        res = self.leackyrelu22(res)
        res = self.conv64(res)
        res = self.conv65(res)
        res = self.leackyrelu23(res)
        #res1 = self.globalaveragepool(res.shape[:2])
        size = tuple(res[0,0,:,:,:].shape)
        #print(size) 
        res1 = self.globalaveragepool(res)
        res2 = self.maxpool6(res)
        res3 = self.conv66(res)
        id_LR = self.identidad(res)
        res12 = torch.concat((res1,res2),1)
        res12 = self.conv67(res12)
        res12 = self.relu(res12)
        res12 = self.conv68(res12)
        res3 = self.relu(res3)
        res3 = self.conv69(res3)
        res = torch.add(res12,res3)
        res = self.sigmoid(res)
        res = torch.mul(res,id_LR)
        x = torch.add(id_ppo,res)
        #fin mRCAB 

        #inicio mRCAB
        id_ppo = self.identidad(x)
        res = self.conv70(x)
        res = self.leackyrelu24(res)
        res = self.conv71(res)
        res = self.conv72(res)
        res = self.leackyrelu25(res)
        #res1 = self.globalaveragepool(res.shape[:2])
        size = tuple(res[0,0,:,:,:].shape)
        #print(size) 
        res1 = self.globalaveragepool(res)
        res2 = self.maxpool7(res)
        res3 = self.conv73(res)
        id_LR = self.identidad(res)
        res12 = torch.concat((res1,res2),1)
        res12 = self.conv74(res12)
        res12 = self.relu(res12)
        res12 = self.conv75(res12)
        res3 = self.relu(res3)
        res3 = self.conv76(res3)
        res = torch.add(res12,res3)
        res = self.sigmoid(res)
        res = torch.mul(res,id_LR)
        x = torch.add(id_ppo,res)
        #fin mRCAB 

        #inicio mRCAB
        id_ppo = self.identidad(x)
        res = self.conv77(x)
        res = self.leackyrelu26(res)
        res = self.conv78(res)
        res = self.conv79(res)
        res = self.leackyrelu27(res)
        #res1 = self.globalaveragepool(res.shape[:2])
        size = tuple(res[0,0,:,:,:].shape)
        #print(size) 
        res1 = self.globalaveragepool(res)
        res2 = self.maxpool8(res)
        res3 = self.conv80(res)
        id_LR = self.identidad(res)
        res12 = torch.concat((res1,res2),1)
        res12 = self.conv81(res12)
        res12 = self.relu(res12)
        res12 = self.conv82(res12)
        res3 = self.relu(res3)
        res3 = self.conv83(res3)
        res = torch.add(res12,res3)
        res = self.sigmoid(res)
        res = torch.mul(res,id_LR)
        x = torch.add(id_ppo,res)
        #fin mRCAB 

        #inicio mRCAB
        id_ppo = self.identidad(x)
        res = self.conv84(x)
        res = self.leackyrelu28(res)
        res = self.conv85(res)
        res = self.conv86(res)
        res = self.leackyrelu29(res)
        #res1 = self.globalaveragepool(res.shape[:2])
        size = tuple(res[0,0,:,:,:].shape)
        #print(size) 
        res1 = self.globalaveragepool(res)
        res2 = self.maxpool9(res)
        res3 = self.conv87(res)
        id_LR = self.identidad(res)
        res12 = torch.concat((res1,res2),1)
        res12 = self.conv88(res12)
        res12 = self.relu(res12)
        res12 = self.conv89(res12)
        res3 = self.relu(res3)
        res3 = self.conv90(res3)
        res = torch.add(res12,res3)
        res = self.sigmoid(res)
        res = torch.mul(res,id_LR)
        x = torch.add(id_ppo,res)
        #fin mRCAB 
        x = self.convRG3(x)
        x = torch.add(x,id10)
        # -- fin cada10 -- 

        # -- inicio cada10 -- 
        id10 = self.identidad(x)


        #inicio mRCAB
        id_ppo = self.identidad(x)
        res = self.conv91(x)
        res = self.leackyrelu30(res)
        res = self.conv92(res)
        res = self.conv93(res)
        res = self.leackyrelu31(res)
        #res1 = self.globalaveragepool(res.shape[:2])
        size = tuple(res[0,0,:,:,:].shape)
        #print(size) 
        res1 = self.globalaveragepool(res) 
        res2 = self.maxpool10(res)
        res3 = self.conv94(res)
        id_LR = self.identidad(res)
        res12 = torch.concat((res1,res2),1)
        res12 = self.conv95(res12)
        res12 = self.relu(res12)
        res12 = self.conv96(res12)
        res3 = self.relu(res3)
        res3 = self.conv97(res3)
        res = torch.add(res12,res3)
        res = self.sigmoid(res)
        res = torch.mul(res,id_LR)
        x = torch.add(id_ppo,res)
        #fin mRCAB 

        #inicio mRCAB
        id_ppo = self.identidad(x)
        res = self.conv98(x)
        res = self.leackyrelu32(res)
        res = self.conv99(res)
        res = self.conv100(res)
        res = self.leackyrelu33(res)
        #res1 = self.globalaveragepool(res.shape[:2])
        size = tuple(res[0,0,:,:,:].shape)
        #print(size) 
        res1 = self.globalaveragepool(res) 
        res2 = self.maxpool11(res)
        res3 = self.conv101(res)
        id_LR = self.identidad(res)
        res12 = torch.concat((res1,res2),1)
        res12 = self.conv102(res12)
        res12 = self.relu(res12)
        res12 = self.conv103(res12)
        res3 = self.relu(res3)
        res3 = self.conv104(res3)
        res = torch.add(res12,res3)
        res = self.sigmoid(res)
        res = torch.mul(res,id_LR)
        x = torch.add(id_ppo,res)
        #fin mRCAB 

        #inicio mRCAB
        id_ppo = self.identidad(x)
        res = self.conv105(x)
        res = self.leackyrelu34(res)
        res = self.conv106(res)
        res = self.conv107(res)
        res = self.leackyrelu35(res)
        #res1 = self.globalaveragepool(res.shape[:2])
        size = tuple(res[0,0,:,:,:].shape)
        #print(size) 
        res1 = self.globalaveragepool(res) 
        res2 = self.maxpool12(res)
        res3 = self.conv108(res)
        id_LR = self.identidad(res)
        res12 = torch.concat((res1,res2),1)
        res12 = self.conv109(res12)
        res12 = self.relu(res12)
        res12 = self.conv110(res12)
        res3 = self.relu(res3)
        res3 = self.conv111(res3)
        res = torch.add(res12,res3)
        res = self.sigmoid(res)
        res = torch.mul(res,id_LR)
        x = torch.add(id_ppo,res)
        #fin mRCAB 

        #inicio mRCAB
        id_ppo = self.identidad(x)
        res = self.conv112(x)
        res = self.leackyrelu36(res)
        res = self.conv113(res)
        res = self.conv114(res)
        res = self.leackyrelu37(res)
        #res1 = self.globalaveragepool(res.shape[:2])
        size = tuple(res[0,0,:,:,:].shape)
        #print(size) 
        res1 = self.globalaveragepool(res) 
        res2 = self.maxpool13(res)
        res3 = self.conv115(res)
        id_LR = self.identidad(res)
        res12 = torch.concat((res1,res2),1)
        res12 = self.conv116(res12)
        res12 = self.relu(res12)
        res12 = self.conv117(res12)
        res3 = self.relu(res3)
        res3 = self.conv118(res3)
        res = torch.add(res12,res3)
        res = self.sigmoid(res)
        res = torch.mul(res,id_LR)
        x = torch.add(id_ppo,res)
        #fin mRCAB 

        #inicio mRCAB
        id_ppo = self.identidad(x)
        res = self.conv119(x)
        res = self.leackyrelu38(res)
        res = self.conv120(res)
        res = self.conv121(res)
        res = self.leackyrelu39(res)
        #res1 = self.globalaveragepool(res.shape[:2])
        size = tuple(res[0,0,:,:,:].shape)
        #print(size) 
        res1 = self.globalaveragepool(res) 
        res2 = self.maxpool14(res)
        res3 = self.conv122(res)
        id_LR = self.identidad(res)
        res12 = torch.concat((res1,res2),1)
        res12 = self.conv123(res12)
        res12 = self.relu(res12)
        res12 = self.conv124(res12)
        res3 = self.relu(res3)
        res3 = self.conv125(res3)
        res = torch.add(res12,res3)
        res = self.sigmoid(res)
        res = torch.mul(res,id_LR)
        x = torch.add(id_ppo,res)
        #fin mRCAB 

        #inicio mRCAB
        id_ppo = self.identidad(x)
        res = self.conv126(x)
        res = self.leackyrelu40(res)
        res = self.conv127(res)
        res = self.conv128(res)
        res = self.leackyrelu41(res)
        #res1 = self.globalaveragepool(res.shape[:2])
        size = tuple(res[0,0,:,:,:].shape)
        #print(size) 
        res1 = self.globalaveragepool(res) 
        res2 = self.maxpool15(res)
        res3 = self.conv129(res)
        id_LR = self.identidad(res)
        res12 = torch.concat((res1,res2),1)
        res12 = self.conv130(res12)
        res12 = self.relu(res12)
        res12 = self.conv131(res12)
        res3 = self.relu(res3)
        res3 = self.conv132(res3)
        res = torch.add(res12,res3)
        res = self.sigmoid(res)
        res = torch.mul(res,id_LR)
        x = torch.add(id_ppo,res)
        #fin mRCAB 

        #inicio mRCAB
        id_ppo = self.identidad(x)
        res = self.conv133(x)
        res = self.leackyrelu42(res)
        res = self.conv134(res)
        res = self.conv135(res)
        res = self.leackyrelu43(res)
        #res1 = self.globalaveragepool(res.shape[:2])
        size = tuple(res[0,0,:,:,:].shape)
        #print(size) 
        res1 = self.globalaveragepool(res) 
        res2 = self.maxpool16(res)
        res3 = self.conv136(res)
        id_LR = self.identidad(res)
        res12 = torch.concat((res1,res2),1)
        res12 = self.conv137(res12)
        res12 = self.relu(res12)
        res12 = self.conv138(res12)
        res3 = self.relu(res3)
        res3 = self.conv139(res3)
        res = torch.add(res12,res3)
        res = self.sigmoid(res)
        res = torch.mul(res,id_LR)
        x = torch.add(id_ppo,res)
        #fin mRCAB 

        #inicio mRCAB
        id_ppo = self.identidad(x)
        res = self.conv140(x)
        res = self.leackyrelu44(res)
        res = self.conv141(res)
        res = self.conv142(res)
        res = self.leackyrelu45(res)
        #res1 = self.globalaveragepool(res.shape[:2])
        size = tuple(res[0,0,:,:,:].shape)
        #print(size) 
        res1 = self.globalaveragepool(res) 
        res2 = self.maxpool17(res)
        res3 = self.conv143(res)
        id_LR = self.identidad(res)
        res12 = torch.concat((res1,res2),1)
        res12 = self.conv144(res12)
        res12 = self.relu(res12)
        res12 = self.conv145(res12)
        res3 = self.relu(res3)
        res3 = self.conv146(res3)
        res = torch.add(res12,res3)
        res = self.sigmoid(res)
        res = torch.mul(res,id_LR)
        x = torch.add(id_ppo,res)
        #fin mRCAB 

        #inicio mRCAB
        id_ppo = self.identidad(x)
        res = self.conv147(x)
        res = self.leackyrelu46(res)
        res = self.conv148(res)
        res = self.conv149(res)
        res = self.leackyrelu47(res)
        #res1 = self.globalaveragepool(res.shape[:2])
        size = tuple(res[0,0,:,:,:].shape)
        #print(size) 
        res1 = self.globalaveragepool(res) 
        res2 = self.maxpool18(res)
        res3 = self.conv150(res)
        id_LR = self.identidad(res)
        res12 = torch.concat((res1,res2),1)
        res12 = self.conv151(res12)
        res12 = self.relu(res12)
        res12 = self.conv152(res12)
        res3 = self.relu(res3)
        res3 = self.conv153(res3)
        res = torch.add(res12,res3)
        res = self.sigmoid(res)
        res = torch.mul(res,id_LR)
        x = torch.add(id_ppo,res)
        #fin mRCAB 

        #inicio mRCAB
        id_ppo = self.identidad(x)
        res = self.conv154(x)
        res = self.leackyrelu48(res)
        res = self.conv155(res)
        res = self.conv156(res)
        res = self.leackyrelu49(res)
        #res1 = self.globalaveragepool(res.shape[:2])
        size = tuple(res[0,0,:,:,:].shape)
        #print(size) 
        res1 = self.globalaveragepool(res) 
        res2 = self.maxpool19(res)
        res3 = self.conv157(res)
        id_LR = self.identidad(res)
        res12 = torch.concat((res1,res2),1)
        res12 = self.conv158(res12)
        res12 = self.relu(res12)
        res12 = self.conv159(res12)
        res3 = self.relu(res3)
        res3 = self.conv160(res3)
        res = torch.add(res12,res3)
        res = self.sigmoid(res)
        res = torch.mul(res,id_LR)
        x = torch.add(id_ppo,res)
        #fin mRCAB 
        x = self.convRG4(x)
        x = torch.add(x,id10)
        # -- fin cada10 -- 


        #inicio conexión 20-40
        id20_1 = self.identidad(x)
        id20_2 = self.identidad(x)
        x = self.iconvRG2(x)
        x = self.ilrRG2(x)

        # -- inicio cada10 -- 
        id10 = self.identidad(x)


        #inicio mRCAB
        id_ppo = self.identidad(x)
        res = self.conv161(x)
        res = self.leackyrelu50(res)
        res = self.conv162(res)
        res = self.conv163(res)
        res = self.leackyrelu51(res)
        #res1 = self.globalaveragepool(res.shape[:2])
        size = tuple(res[0,0,:,:,:].shape)
        #print(size) 
        res1 = self.globalaveragepool2(res) 
        res2 = self.maxpool20(res)
        res3 = self.conv164(res)
        id_LR = self.identidad(res)
        res12 = torch.concat((res1,res2),1)
        res12 = self.conv165(res12)
        res12 = self.relu(res12)
        res12 = self.conv166(res12)
        res3 = self.relu(res3)
        res3 = self.conv167(res3)
        res = torch.add(res12,res3)
        res = self.sigmoid(res)
        res = torch.mul(res,id_LR)
        x = torch.add(id_ppo,res)
        #fin mRCAB 

        #inicio mRCAB
        id_ppo = self.identidad(x)
        res = self.conv168(x)
        res = self.leackyrelu52(res)
        res = self.conv169(res)
        res = self.conv170(res)
        res = self.leackyrelu53(res)
        #res1 = self.globalaveragepool(res.shape[:2])
        size = tuple(res[0,0,:,:,:].shape)
        #print(size) 
        res1 = self.globalaveragepool2(res) 
        res2 = self.maxpool21(res)
        res3 = self.conv171(res)
        id_LR = self.identidad(res)
        res12 = torch.concat((res1,res2),1)
        res12 = self.conv172(res12)
        res12 = self.relu(res12)
        res12 = self.conv173(res12)
        res3 = self.relu(res3)
        res3 = self.conv174(res3)
        res = torch.add(res12,res3)
        res = self.sigmoid(res)
        res = torch.mul(res,id_LR)
        x = torch.add(id_ppo,res)
        #fin mRCAB 

        #inicio mRCAB
        id_ppo = self.identidad(x)
        res = self.conv175(x)
        res = self.leackyrelu54(res)
        res = self.conv176(res)
        res = self.conv177(res)
        res = self.leackyrelu55(res)
        #res1 = self.globalaveragepool(res.shape[:2])
        size = tuple(res[0,0,:,:,:].shape)
        #print(size) 
        res1 = self.globalaveragepool2(res) 
        res2 = self.maxpool22(res)
        res3 = self.conv178(res)
        id_LR = self.identidad(res)
        res12 = torch.concat((res1,res2),1)
        res12 = self.conv179(res12)
        res12 = self.relu(res12)
        res12 = self.conv180(res12)
        res3 = self.relu(res3)
        res3 = self.conv181(res3)
        res = torch.add(res12,res3)
        res = self.sigmoid(res)
        res = torch.mul(res,id_LR)
        x = torch.add(id_ppo,res)
        #fin mRCAB 

        #inicio mRCAB
        id_ppo = self.identidad(x)
        res = self.conv182(x)
        res = self.leackyrelu56(res)
        res = self.conv183(res)
        res = self.conv184(res)
        res = self.leackyrelu57(res)
        #res1 = self.globalaveragepool(res.shape[:2])
        size = tuple(res[0,0,:,:,:].shape)
        #print(size) 
        res1 = self.globalaveragepool2(res) 
        res2 = self.maxpool23(res)
        res3 = self.conv185(res)
        id_LR = self.identidad(res)
        res12 = torch.concat((res1,res2),1)
        res12 = self.conv186(res12)
        res12 = self.relu(res12)
        res12 = self.conv187(res12)
        res3 = self.relu(res3)
        res3 = self.conv188(res3)
        res = torch.add(res12,res3)
        res = self.sigmoid(res)
        res = torch.mul(res,id_LR)
        x = torch.add(id_ppo,res)
        #fin mRCAB 

        #inicio mRCAB
        id_ppo = self.identidad(x)
        res = self.conv189(x)
        res = self.leackyrelu58(res)
        res = self.conv190(res)
        res = self.conv191(res)
        res = self.leackyrelu59(res)
        #res1 = self.globalaveragepool(res.shape[:2])
        size = tuple(res[0,0,:,:,:].shape)
        #print(size) 
        res1 = self.globalaveragepool2(res) 
        res2 = self.maxpool24(res)
        res3 = self.conv192(res)
        id_LR = self.identidad(res)
        res12 = torch.concat((res1,res2),1)
        res12 = self.conv193(res12)
        res12 = self.relu(res12)
        res12 = self.conv194(res12)
        res3 = self.relu(res3)
        res3 = self.conv195(res3)
        res = torch.add(res12,res3)
        res = self.sigmoid(res)
        res = torch.mul(res,id_LR)
        x = torch.add(id_ppo,res)
        #fin mRCAB 

        #inicio mRCAB
        id_ppo = self.identidad(x)
        res = self.conv196(x)
        res = self.leackyrelu60(res)
        res = self.conv197(res)
        res = self.conv198(res)
        res = self.leackyrelu61(res)
        #res1 = self.globalaveragepool(res.shape[:2])
        size = tuple(res[0,0,:,:,:].shape)
        #print(size) 
        res1 = self.globalaveragepool2(res) 
        res2 = self.maxpool25(res)
        res3 = self.conv199(res)
        id_LR = self.identidad(res)
        res12 = torch.concat((res1,res2),1)
        res12 = self.conv200(res12)
        res12 = self.relu(res12)
        res12 = self.conv201(res12)
        res3 = self.relu(res3)
        res3 = self.conv202(res3)
        res = torch.add(res12,res3)
        res = self.sigmoid(res)
        res = torch.mul(res,id_LR)
        x = torch.add(id_ppo,res)
        #fin mRCAB 

        #inicio mRCAB
        id_ppo = self.identidad(x)
        res = self.conv203(x)
        res = self.leackyrelu62(res)
        res = self.conv204(res)
        res = self.conv205(res)
        res = self.leackyrelu63(res)
        #res1 = self.globalaveragepool(res.shape[:2])
        size = tuple(res[0,0,:,:,:].shape)
        #print(size) 
        res1 = self.globalaveragepool2(res) 
        res2 = self.maxpool26(res)
        res3 = self.conv206(res)
        id_LR = self.identidad(res)
        res12 = torch.concat((res1,res2),1)
        res12 = self.conv207(res12)
        res12 = self.relu(res12)
        res12 = self.conv208(res12)
        res3 = self.relu(res3)
        res3 = self.conv209(res3)
        res = torch.add(res12,res3)
        res = self.sigmoid(res)
        res = torch.mul(res,id_LR)
        x = torch.add(id_ppo,res)
        #fin mRCAB 

        #inicio mRCAB
        id_ppo = self.identidad(x)
        res = self.conv210(x)
        res = self.leackyrelu64(res)
        res = self.conv211(res)
        res = self.conv212(res)
        res = self.leackyrelu65(res)
        #res1 = self.globalaveragepool(res.shape[:2])
        size = tuple(res[0,0,:,:,:].shape)
        #print(size) 
        res1 = self.globalaveragepool2(res) 
        res2 = self.maxpool27(res)
        res3 = self.conv213(res)
        id_LR = self.identidad(res)
        res12 = torch.concat((res1,res2),1)
        res12 = self.conv214(res12)
        res12 = self.relu(res12)
        res12 = self.conv215(res12)
        res3 = self.relu(res3)
        res3 = self.conv216(res3)
        res = torch.add(res12,res3)
        res = self.sigmoid(res)
        res = torch.mul(res,id_LR)
        x = torch.add(id_ppo,res)
        #fin mRCAB 

        #inicio mRCAB
        id_ppo = self.identidad(x)
        res = self.conv217(x)
        res = self.leackyrelu66(res)
        res = self.conv218(res)
        res = self.conv219(res)
        res = self.leackyrelu67(res)
        #res1 = self.globalaveragepool(res.shape[:2])
        size = tuple(res[0,0,:,:,:].shape)
        #print(size) 
        res1 = self.globalaveragepool2(res) 
        res2 = self.maxpool28(res)
        res3 = self.conv220(res)
        id_LR = self.identidad(res)
        res12 = torch.concat((res1,res2),1)
        res12 = self.conv221(res12)
        res12 = self.relu(res12)
        res12 = self.conv222(res12)
        res3 = self.relu(res3)
        res3 = self.conv223(res3)
        res = torch.add(res12,res3)
        res = self.sigmoid(res)
        res = torch.mul(res,id_LR)
        x = torch.add(id_ppo,res)
        #fin mRCAB 

        #inicio mRCAB
        id_ppo = self.identidad(x)
        res = self.conv224(x)
        res = self.leackyrelu68(res)
        res = self.conv225(res)
        res = self.conv226(res)
        res = self.leackyrelu69(res)
        #res1 = self.globalaveragepool(res.shape[:2])
        size = tuple(res[0,0,:,:,:].shape)
        #print(size) 
        res1 = self.globalaveragepool2(res) 
        res2 = self.maxpool29(res)
        res3 = self.conv227(res)
        id_LR = self.identidad(res)
        res12 = torch.concat((res1,res2),1)
        res12 = self.conv228(res12)
        res12 = self.relu(res12)
        res12 = self.conv229(res12)
        res3 = self.relu(res3)
        res3 = self.conv230(res3)
        res = torch.add(res12,res3)
        res = self.sigmoid(res)
        res = torch.mul(res,id_LR)
        x = torch.add(id_ppo,res)
        #fin mRCAB 
        x = self.convRG5(x)
        x = torch.add(x,id10)
        # -- fin cada10 -- 

        # -- inicio cada10 -- 
        id10 = self.identidad(x)


        #inicio mRCAB
        id_ppo = self.identidad(x)
        res = self.conv231(x)
        res = self.leackyrelu70(res)
        res = self.conv232(res)
        res = self.conv233(res)
        res = self.leackyrelu71(res)
        #res1 = self.globalaveragepool(res.shape[:2])
        size = tuple(res[0,0,:,:,:].shape)
        #print(size) 
        res1 = self.globalaveragepool2(res) 
        res2 = self.maxpool30(res)
        res3 = self.conv234(res)
        id_LR = self.identidad(res)
        res12 = torch.concat((res1,res2),1)
        res12 = self.conv235(res12)
        res12 = self.relu(res12)
        res12 = self.conv236(res12)
        res3 = self.relu(res3)
        res3 = self.conv237(res3)
        res = torch.add(res12,res3)
        res = self.sigmoid(res)
        res = torch.mul(res,id_LR)
        x = torch.add(id_ppo,res)
        #fin mRCAB 

        #inicio mRCAB
        id_ppo = self.identidad(x)
        res = self.conv238(x)
        res = self.leackyrelu72(res)
        res = self.conv239(res)
        res = self.conv240(res)
        res = self.leackyrelu73(res)
        #res1 = self.globalaveragepool(res.shape[:2])
        size = tuple(res[0,0,:,:,:].shape)
        #print(size) 
        res1 = self.globalaveragepool2(res) 
        res2 = self.maxpool31(res)
        res3 = self.conv241(res)
        id_LR = self.identidad(res)
        res12 = torch.concat((res1,res2),1)
        res12 = self.conv242(res12)
        res12 = self.relu(res12)
        res12 = self.conv243(res12)
        res3 = self.relu(res3)
        res3 = self.conv244(res3)
        res = torch.add(res12,res3)
        res = self.sigmoid(res)
        res = torch.mul(res,id_LR)
        x = torch.add(id_ppo,res)
        #fin mRCAB 

        #inicio mRCAB
        id_ppo = self.identidad(x)
        res = self.conv245(x)
        res = self.leackyrelu74(res)
        res = self.conv246(res)
        res = self.conv247(res)
        res = self.leackyrelu75(res)
        #res1 = self.globalaveragepool(res.shape[:2])
        size = tuple(res[0,0,:,:,:].shape)
        #print(size) 
        res1 = self.globalaveragepool2(res) 
        res2 = self.maxpool32(res)
        res3 = self.conv248(res)
        id_LR = self.identidad(res)
        res12 = torch.concat((res1,res2),1)
        res12 = self.conv249(res12)
        res12 = self.relu(res12)
        res12 = self.conv250(res12)
        res3 = self.relu(res3)
        res3 = self.conv251(res3)
        res = torch.add(res12,res3)
        res = self.sigmoid(res)
        res = torch.mul(res,id_LR)
        x = torch.add(id_ppo,res)
        #fin mRCAB 

        #inicio mRCAB
        id_ppo = self.identidad(x)
        res = self.conv252(x)
        res = self.leackyrelu76(res)
        res = self.conv253(res)
        res = self.conv254(res)
        res = self.leackyrelu77(res)
        #res1 = self.globalaveragepool(res.shape[:2])
        size = tuple(res[0,0,:,:,:].shape)
        #print(size) 
        res1 = self.globalaveragepool2(res) 
        res2 = self.maxpool33(res)
        res3 = self.conv255(res)
        id_LR = self.identidad(res)
        res12 = torch.concat((res1,res2),1)
        res12 = self.conv256(res12)
        res12 = self.relu(res12)
        res12 = self.conv257(res12)
        res3 = self.relu(res3)
        res3 = self.conv258(res3)
        res = torch.add(res12,res3)
        res = self.sigmoid(res)
        res = torch.mul(res,id_LR)
        x = torch.add(id_ppo,res)
        #fin mRCAB 

        #inicio mRCAB
        id_ppo = self.identidad(x)
        res = self.conv259(x)
        res = self.leackyrelu78(res)
        res = self.conv260(res)
        res = self.conv261(res)
        res = self.leackyrelu79(res)
        #res1 = self.globalaveragepool(res.shape[:2])
        size = tuple(res[0,0,:,:,:].shape)
        #print(size) 
        res1 = self.globalaveragepool2(res) 
        res2 = self.maxpool34(res)
        res3 = self.conv262(res)
        id_LR = self.identidad(res)
        res12 = torch.concat((res1,res2),1)
        res12 = self.conv263(res12)
        res12 = self.relu(res12)
        res12 = self.conv264(res12)
        res3 = self.relu(res3)
        res3 = self.conv265(res3)
        res = torch.add(res12,res3)
        res = self.sigmoid(res)
        res = torch.mul(res,id_LR)
        x = torch.add(id_ppo,res)
        #fin mRCAB 

        #inicio mRCAB
        id_ppo = self.identidad(x)
        res = self.conv266(x)
        res = self.leackyrelu80(res)
        res = self.conv267(res)
        res = self.conv268(res)
        res = self.leackyrelu81(res)
        #res1 = self.globalaveragepool(res.shape[:2])
        size = tuple(res[0,0,:,:,:].shape)
        #print(size) 
        res1 = self.globalaveragepool2(res) 
        res2 = self.maxpool35(res)
        res3 = self.conv269(res)
        id_LR = self.identidad(res)
        res12 = torch.concat((res1,res2),1)
        res12 = self.conv270(res12)
        res12 = self.relu(res12)
        res12 = self.conv271(res12)
        res3 = self.relu(res3)
        res3 = self.conv272(res3)
        res = torch.add(res12,res3)
        res = self.sigmoid(res)
        res = torch.mul(res,id_LR)
        x = torch.add(id_ppo,res)
        #fin mRCAB 

        #inicio mRCAB
        id_ppo = self.identidad(x)
        res = self.conv273(x)
        res = self.leackyrelu82(res)
        res = self.conv274(res)
        res = self.conv275(res)
        res = self.leackyrelu83(res)
        #res1 = self.globalaveragepool(res.shape[:2])
        size = tuple(res[0,0,:,:,:].shape)
        #print(size) 
        res1 = self.globalaveragepool2(res) 
        res2 = self.maxpool36(res)
        res3 = self.conv276(res)
        id_LR = self.identidad(res)
        res12 = torch.concat((res1,res2),1)
        res12 = self.conv277(res12)
        res12 = self.relu(res12)
        res12 = self.conv278(res12)
        res3 = self.relu(res3)
        res3 = self.conv279(res3)
        res = torch.add(res12,res3)
        res = self.sigmoid(res)
        res = torch.mul(res,id_LR)
        x = torch.add(id_ppo,res)
        #fin mRCAB 

        #inicio mRCAB
        id_ppo = self.identidad(x)
        res = self.conv280(x)
        res = self.leackyrelu84(res)
        res = self.conv281(res)
        res = self.conv282(res)
        res = self.leackyrelu85(res)
        #res1 = self.globalaveragepool(res.shape[:2])
        size = tuple(res[0,0,:,:,:].shape)
        #print(size) 
        res1 = self.globalaveragepool2(res) 
        res2 = self.maxpool37(res)
        res3 = self.conv283(res)
        id_LR = self.identidad(res)
        res12 = torch.concat((res1,res2),1)
        res12 = self.conv284(res12)
        res12 = self.relu(res12)
        res12 = self.conv285(res12)
        res3 = self.relu(res3)
        res3 = self.conv286(res3)
        res = torch.add(res12,res3)
        res = self.sigmoid(res)
        res = torch.mul(res,id_LR)
        x = torch.add(id_ppo,res)
        #fin mRCAB 

        #inicio mRCAB
        id_ppo = self.identidad(x)
        res = self.conv287(x)
        res = self.leackyrelu86(res)
        res = self.conv288(res)
        res = self.conv289(res)
        res = self.leackyrelu87(res)
        #res1 = self.globalaveragepool(res.shape[:2])
        size = tuple(res[0,0,:,:,:].shape)
        #print(size) 
        res1 = self.globalaveragepool2(res) 
        res2 = self.maxpool38(res)
        res3 = self.conv290(res)
        id_LR = self.identidad(res)
        res12 = torch.concat((res1,res2),1)
        res12 = self.conv291(res12)
        res12 = self.relu(res12)
        res12 = self.conv292(res12)
        res3 = self.relu(res3)
        res3 = self.conv293(res3)
        res = torch.add(res12,res3)
        res = self.sigmoid(res)
        res = torch.mul(res,id_LR)
        x = torch.add(id_ppo,res)
        #fin mRCAB 

        #inicio mRCAB
        id_ppo = self.identidad(x)
        res = self.conv294(x)
        res = self.leackyrelu88(res)
        res = self.conv295(res)
        res = self.conv296(res)
        res = self.leackyrelu89(res)
        #res1 = self.globalaveragepool(res.shape[:2])
        size = tuple(res[0,0,:,:,:].shape)
        #print(size) 
        res1 = self.globalaveragepool2(res) 
        res2 = self.maxpool39(res)
        res3 = self.conv297(res)
        id_LR = self.identidad(res)
        res12 = torch.concat((res1,res2),1)
        res12 = self.conv298(res12)
        res12 = self.relu(res12)
        res12 = self.conv299(res12)
        res3 = self.relu(res3)
        res3 = self.conv300(res3)
        res = torch.add(res12,res3)
        res = self.sigmoid(res)
        res = torch.mul(res,id_LR)
        x = torch.add(id_ppo,res)
        #fin mRCAB 
        x = self.convRG6(x)
        x = torch.add(x,id10)
        # -- fin cada10 -- 


        #fin conexión 20-40
        #x = self.resize(x) 
        x = nn.functional.interpolate(x,scale_factor=(2,2,2),mode='trilinear') 
        #x = torch.nn.functional.upsample(x,scale_factor=(2,2,2),mode='trilinear') 
        x = torch.concat((x,id20_1),1)
        x = self.iconvRG3(x)
        x = self.ilrRG3(x)
        x = torch.add(x,id20_2)

        # -- inicio cada10 -- 
        id10 = self.identidad(x)


        #inicio mRCAB
        id_ppo = self.identidad(x)
        res = self.conv301(x)
        res = self.leackyrelu90(res)
        res = self.conv302(res)
        res = self.conv303(res)
        res = self.leackyrelu91(res)
        #res1 = self.globalaveragepool(res.shape[:2])
        size = tuple(res[0,0,:,:,:].shape)
        #print(size) 
        res1 = self.globalaveragepool(res) 
        res2 = self.maxpool40(res)
        res3 = self.conv304(res)
        id_LR = self.identidad(res)
        res12 = torch.concat((res1,res2),1)
        res12 = self.conv305(res12)
        res12 = self.relu(res12)
        res12 = self.conv306(res12)
        res3 = self.relu(res3)
        res3 = self.conv307(res3)
        res = torch.add(res12,res3)
        res = self.sigmoid(res)
        res = torch.mul(res,id_LR)
        x = torch.add(id_ppo,res)
        #fin mRCAB 

        #inicio mRCAB
        id_ppo = self.identidad(x)
        res = self.conv308(x)
        res = self.leackyrelu92(res)
        res = self.conv309(res)
        res = self.conv310(res)
        res = self.leackyrelu93(res)
        #res1 = self.globalaveragepool(res.shape[:2])
        size = tuple(res[0,0,:,:,:].shape)
        #print(size) 
        res1 = self.globalaveragepool(res) 
        res2 = self.maxpool41(res)
        res3 = self.conv311(res)
        id_LR = self.identidad(res)
        res12 = torch.concat((res1,res2),1)
        res12 = self.conv312(res12)
        res12 = self.relu(res12)
        res12 = self.conv313(res12)
        res3 = self.relu(res3)
        res3 = self.conv314(res3)
        res = torch.add(res12,res3)
        res = self.sigmoid(res)
        res = torch.mul(res,id_LR)
        x = torch.add(id_ppo,res)
        #fin mRCAB 

        #inicio mRCAB
        id_ppo = self.identidad(x)
        res = self.conv315(x)
        res = self.leackyrelu94(res)
        res = self.conv316(res)
        res = self.conv317(res)
        res = self.leackyrelu95(res)
        #res1 = self.globalaveragepool(res.shape[:2])
        size = tuple(res[0,0,:,:,:].shape)
        #print(size) 
        res1 = self.globalaveragepool(res) 
        res2 = self.maxpool42(res)
        res3 = self.conv318(res)
        id_LR = self.identidad(res)
        res12 = torch.concat((res1,res2),1)
        res12 = self.conv319(res12)
        res12 = self.relu(res12)
        res12 = self.conv320(res12)
        res3 = self.relu(res3)
        res3 = self.conv321(res3)
        res = torch.add(res12,res3)
        res = self.sigmoid(res)
        res = torch.mul(res,id_LR)
        x = torch.add(id_ppo,res)
        #fin mRCAB 

        #inicio mRCAB
        id_ppo = self.identidad(x)
        res = self.conv322(x)
        res = self.leackyrelu96(res)
        res = self.conv323(res)
        res = self.conv324(res)
        res = self.leackyrelu97(res)
        #res1 = self.globalaveragepool(res.shape[:2])
        size = tuple(res[0,0,:,:,:].shape)
        #print(size) 
        res1 = self.globalaveragepool(res) 
        res2 = self.maxpool43(res)
        res3 = self.conv325(res)
        id_LR = self.identidad(res)
        res12 = torch.concat((res1,res2),1)
        res12 = self.conv326(res12)
        res12 = self.relu(res12)
        res12 = self.conv327(res12)
        res3 = self.relu(res3)
        res3 = self.conv328(res3)
        res = torch.add(res12,res3)
        res = self.sigmoid(res)
        res = torch.mul(res,id_LR)
        x = torch.add(id_ppo,res)
        #fin mRCAB 

        #inicio mRCAB
        id_ppo = self.identidad(x)
        res = self.conv329(x)
        res = self.leackyrelu98(res)
        res = self.conv330(res)
        res = self.conv331(res)
        res = self.leackyrelu99(res)
        #res1 = self.globalaveragepool(res.shape[:2])
        size = tuple(res[0,0,:,:,:].shape)
        #print(size) 
        res1 = self.globalaveragepool(res) 
        res2 = self.maxpool44(res)
        res3 = self.conv332(res)
        id_LR = self.identidad(res)
        res12 = torch.concat((res1,res2),1)
        res12 = self.conv333(res12)
        res12 = self.relu(res12)
        res12 = self.conv334(res12)
        res3 = self.relu(res3)
        res3 = self.conv335(res3)
        res = torch.add(res12,res3)
        res = self.sigmoid(res)
        res = torch.mul(res,id_LR)
        x = torch.add(id_ppo,res)
        #fin mRCAB 

        #inicio mRCAB
        id_ppo = self.identidad(x)
        res = self.conv336(x)
        res = self.leackyrelu100(res)
        res = self.conv337(res)
        res = self.conv338(res)
        res = self.leackyrelu101(res)
        #res1 = self.globalaveragepool(res.shape[:2])
        size = tuple(res[0,0,:,:,:].shape)
        #print(size) 
        res1 = self.globalaveragepool(res) 
        res2 = self.maxpool45(res)
        res3 = self.conv339(res)
        id_LR = self.identidad(res)
        res12 = torch.concat((res1,res2),1)
        res12 = self.conv340(res12)
        res12 = self.relu(res12)
        res12 = self.conv341(res12)
        res3 = self.relu(res3)
        res3 = self.conv342(res3)
        res = torch.add(res12,res3)
        res = self.sigmoid(res)
        res = torch.mul(res,id_LR)
        x = torch.add(id_ppo,res)
        #fin mRCAB 

        #inicio mRCAB
        id_ppo = self.identidad(x)
        res = self.conv343(x)
        res = self.leackyrelu102(res)
        res = self.conv344(res)
        res = self.conv345(res)
        res = self.leackyrelu103(res)
        #res1 = self.globalaveragepool(res.shape[:2])
        size = tuple(res[0,0,:,:,:].shape)
        #print(size) 
        res1 = self.globalaveragepool(res) 
        res2 = self.maxpool46(res)
        res3 = self.conv346(res)
        id_LR = self.identidad(res)
        res12 = torch.concat((res1,res2),1)
        res12 = self.conv347(res12)
        res12 = self.relu(res12)
        res12 = self.conv348(res12)
        res3 = self.relu(res3)
        res3 = self.conv349(res3)
        res = torch.add(res12,res3)
        res = self.sigmoid(res)
        res = torch.mul(res,id_LR)
        x = torch.add(id_ppo,res)
        #fin mRCAB 

        #inicio mRCAB
        id_ppo = self.identidad(x)
        res = self.conv350(x)
        res = self.leackyrelu104(res)
        res = self.conv351(res)
        res = self.conv352(res)
        res = self.leackyrelu105(res)
        #res1 = self.globalaveragepool(res.shape[:2])
        size = tuple(res[0,0,:,:,:].shape)
        #print(size) 
        res1 = self.globalaveragepool(res) 
        res2 = self.maxpool47(res)
        res3 = self.conv353(res)
        id_LR = self.identidad(res)
        res12 = torch.concat((res1,res2),1)
        res12 = self.conv354(res12)
        res12 = self.relu(res12)
        res12 = self.conv355(res12)
        res3 = self.relu(res3)
        res3 = self.conv356(res3)
        res = torch.add(res12,res3)
        res = self.sigmoid(res)
        res = torch.mul(res,id_LR)
        x = torch.add(id_ppo,res)
        #fin mRCAB 

        #inicio mRCAB
        id_ppo = self.identidad(x)
        res = self.conv357(x)
        res = self.leackyrelu106(res)
        res = self.conv358(res)
        res = self.conv359(res)
        res = self.leackyrelu107(res)
        #res1 = self.globalaveragepool(res.shape[:2])
        size = tuple(res[0,0,:,:,:].shape)
        #print(size) 
        res1 = self.globalaveragepool(res) 
        res2 = self.maxpool48(res)
        res3 = self.conv360(res)
        id_LR = self.identidad(res)
        res12 = torch.concat((res1,res2),1)
        res12 = self.conv361(res12)
        res12 = self.relu(res12)
        res12 = self.conv362(res12)
        res3 = self.relu(res3)
        res3 = self.conv363(res3)
        res = torch.add(res12,res3)
        res = self.sigmoid(res)
        res = torch.mul(res,id_LR)
        x = torch.add(id_ppo,res)
        #fin mRCAB 

        #inicio mRCAB
        id_ppo = self.identidad(x)
        res = self.conv364(x)
        res = self.leackyrelu108(res)
        res = self.conv365(res)
        res = self.conv366(res)
        res = self.leackyrelu109(res)
        #res1 = self.globalaveragepool(res.shape[:2])
        size = tuple(res[0,0,:,:,:].shape)
        #print(size) 
        res1 = self.globalaveragepool(res) 
        res2 = self.maxpool49(res)
        res3 = self.conv367(res)
        id_LR = self.identidad(res)
        res12 = torch.concat((res1,res2),1)
        res12 = self.conv368(res12)
        res12 = self.relu(res12)
        res12 = self.conv369(res12)
        res3 = self.relu(res3)
        res3 = self.conv370(res3)
        res = torch.add(res12,res3)
        res = self.sigmoid(res)
        res = torch.mul(res,id_LR)
        x = torch.add(id_ppo,res)
        #fin mRCAB 
        x = self.convRG7(x)
        x = torch.add(x,id10)
        # -- fin cada10 -- 

        # -- inicio cada10 -- 
        id10 = self.identidad(x)


        #inicio mRCAB
        id_ppo = self.identidad(x)
        res = self.conv371(x)
        res = self.leackyrelu110(res)
        res = self.conv372(res)
        res = self.conv373(res)
        res = self.leackyrelu111(res)
        #res1 = self.globalaveragepool(res.shape[:2])
        size = tuple(res[0,0,:,:,:].shape)
        #print(size) 
        res1 = self.globalaveragepool(res) 
        res2 = self.maxpool50(res)
        res3 = self.conv374(res)
        id_LR = self.identidad(res)
        res12 = torch.concat((res1,res2),1)
        res12 = self.conv375(res12)
        res12 = self.relu(res12)
        res12 = self.conv376(res12)
        res3 = self.relu(res3)
        res3 = self.conv377(res3)
        res = torch.add(res12,res3)
        res = self.sigmoid(res)
        res = torch.mul(res,id_LR)
        x = torch.add(id_ppo,res)
        #fin mRCAB 

        #inicio mRCAB
        id_ppo = self.identidad(x)
        res = self.conv378(x)
        res = self.leackyrelu112(res)
        res = self.conv379(res)
        res = self.conv380(res)
        res = self.leackyrelu113(res)
        #res1 = self.globalaveragepool(res.shape[:2])
        size = tuple(res[0,0,:,:,:].shape)
        #print(size) 
        res1 = self.globalaveragepool(res) 
        res2 = self.maxpool51(res)
        res3 = self.conv381(res)
        id_LR = self.identidad(res)
        res12 = torch.concat((res1,res2),1)
        res12 = self.conv382(res12)
        res12 = self.relu(res12)
        res12 = self.conv383(res12)
        res3 = self.relu(res3)
        res3 = self.conv384(res3)
        res = torch.add(res12,res3)
        res = self.sigmoid(res)
        res = torch.mul(res,id_LR)
        x = torch.add(id_ppo,res)
        #fin mRCAB 

        #inicio mRCAB
        id_ppo = self.identidad(x)
        res = self.conv385(x)
        res = self.leackyrelu114(res)
        res = self.conv386(res)
        res = self.conv387(res)
        res = self.leackyrelu115(res)
        #res1 = self.globalaveragepool(res.shape[:2])
        size = tuple(res[0,0,:,:,:].shape)
        #print(size) 
        res1 = self.globalaveragepool(res) 
        res2 = self.maxpool52(res)
        res3 = self.conv388(res)
        id_LR = self.identidad(res)
        res12 = torch.concat((res1,res2),1)
        res12 = self.conv389(res12)
        res12 = self.relu(res12)
        res12 = self.conv390(res12)
        res3 = self.relu(res3)
        res3 = self.conv391(res3)
        res = torch.add(res12,res3)
        res = self.sigmoid(res)
        res = torch.mul(res,id_LR)
        x = torch.add(id_ppo,res)
        #fin mRCAB 

        #inicio mRCAB
        id_ppo = self.identidad(x)
        res = self.conv392(x)
        res = self.leackyrelu116(res)
        res = self.conv393(res)
        res = self.conv394(res)
        res = self.leackyrelu117(res)
        #res1 = self.globalaveragepool(res.shape[:2])
        size = tuple(res[0,0,:,:,:].shape)
        #print(size) 
        res1 = self.globalaveragepool(res) 
        res2 = self.maxpool53(res)
        res3 = self.conv395(res)
        id_LR = self.identidad(res)
        res12 = torch.concat((res1,res2),1)
        res12 = self.conv396(res12)
        res12 = self.relu(res12)
        res12 = self.conv397(res12)
        res3 = self.relu(res3)
        res3 = self.conv398(res3)
        res = torch.add(res12,res3)
        res = self.sigmoid(res)
        res = torch.mul(res,id_LR)
        x = torch.add(id_ppo,res)
        #fin mRCAB 

        #inicio mRCAB
        id_ppo = self.identidad(x)
        res = self.conv399(x)
        res = self.leackyrelu118(res)
        res = self.conv400(res)
        res = self.conv401(res)
        res = self.leackyrelu119(res)
        #res1 = self.globalaveragepool(res.shape[:2])
        size = tuple(res[0,0,:,:,:].shape)
        #print(size) 
        res1 = self.globalaveragepool(res) 
        res2 = self.maxpool54(res)
        res3 = self.conv402(res)
        id_LR = self.identidad(res)
        res12 = torch.concat((res1,res2),1)
        res12 = self.conv403(res12)
        res12 = self.relu(res12)
        res12 = self.conv404(res12)
        res3 = self.relu(res3)
        res3 = self.conv405(res3)
        res = torch.add(res12,res3)
        res = self.sigmoid(res)
        res = torch.mul(res,id_LR)
        x = torch.add(id_ppo,res)
        #fin mRCAB 

        #inicio mRCAB
        id_ppo = self.identidad(x)
        res = self.conv406(x)
        res = self.leackyrelu120(res)
        res = self.conv407(res)
        res = self.conv408(res)
        res = self.leackyrelu121(res)
        #res1 = self.globalaveragepool(res.shape[:2])
        size = tuple(res[0,0,:,:,:].shape)
        #print(size) 
        res1 = self.globalaveragepool(res) 
        res2 = self.maxpool55(res)
        res3 = self.conv409(res)
        id_LR = self.identidad(res)
        res12 = torch.concat((res1,res2),1)
        res12 = self.conv410(res12)
        res12 = self.relu(res12)
        res12 = self.conv411(res12)
        res3 = self.relu(res3)
        res3 = self.conv412(res3)
        res = torch.add(res12,res3)
        res = self.sigmoid(res)
        res = torch.mul(res,id_LR)
        x = torch.add(id_ppo,res)
        #fin mRCAB 

        #inicio mRCAB
        id_ppo = self.identidad(x)
        res = self.conv413(x)
        res = self.leackyrelu122(res)
        res = self.conv414(res)
        res = self.conv415(res)
        res = self.leackyrelu123(res)
        #res1 = self.globalaveragepool(res.shape[:2])
        size = tuple(res[0,0,:,:,:].shape)
        #print(size) 
        res1 = self.globalaveragepool(res) 
        res2 = self.maxpool56(res)
        res3 = self.conv416(res)
        id_LR = self.identidad(res)
        res12 = torch.concat((res1,res2),1)
        res12 = self.conv417(res12)
        res12 = self.relu(res12)
        res12 = self.conv418(res12)
        res3 = self.relu(res3)
        res3 = self.conv419(res3)
        res = torch.add(res12,res3)
        res = self.sigmoid(res)
        res = torch.mul(res,id_LR)
        x = torch.add(id_ppo,res)
        #fin mRCAB 

        #inicio mRCAB
        id_ppo = self.identidad(x)
        res = self.conv420(x)
        res = self.leackyrelu124(res)
        res = self.conv421(res)
        res = self.conv422(res)
        res = self.leackyrelu125(res)
        #res1 = self.globalaveragepool(res.shape[:2])
        size = tuple(res[0,0,:,:,:].shape)
        #print(size) 
        res1 = self.globalaveragepool(res) 
        res2 = self.maxpool57(res)
        res3 = self.conv423(res)
        id_LR = self.identidad(res)
        res12 = torch.concat((res1,res2),1)
        res12 = self.conv424(res12)
        res12 = self.relu(res12)
        res12 = self.conv425(res12)
        res3 = self.relu(res3)
        res3 = self.conv426(res3)
        res = torch.add(res12,res3)
        res = self.sigmoid(res)
        res = torch.mul(res,id_LR)
        x = torch.add(id_ppo,res)
        #fin mRCAB 

        #inicio mRCAB
        id_ppo = self.identidad(x)
        res = self.conv427(x)
        res = self.leackyrelu126(res)
        res = self.conv428(res)
        res = self.conv429(res)
        res = self.leackyrelu127(res)
        #res1 = self.globalaveragepool(res.shape[:2])
        size = tuple(res[0,0,:,:,:].shape)
        #print(size) 
        res1 = self.globalaveragepool(res) 
        res2 = self.maxpool58(res)
        res3 = self.conv430(res)
        id_LR = self.identidad(res)
        res12 = torch.concat((res1,res2),1)
        res12 = self.conv431(res12)
        res12 = self.relu(res12)
        res12 = self.conv432(res12)
        res3 = self.relu(res3)
        res3 = self.conv433(res3)
        res = torch.add(res12,res3)
        res = self.sigmoid(res)
        res = torch.mul(res,id_LR)
        x = torch.add(id_ppo,res)
        #fin mRCAB 

        #inicio mRCAB
        id_ppo = self.identidad(x)
        res = self.conv434(x)
        res = self.leackyrelu128(res)
        res = self.conv435(res)
        res = self.conv436(res)
        res = self.leackyrelu129(res)
        #res1 = self.globalaveragepool(res.shape[:2])
        size = tuple(res[0,0,:,:,:].shape)
        #print(size) 
        res1 = self.globalaveragepool(res) 
        res2 = self.maxpool59(res)
        res3 = self.conv437(res)
        id_LR = self.identidad(res)
        res12 = torch.concat((res1,res2),1)
        res12 = self.conv438(res12)
        res12 = self.relu(res12)
        res12 = self.conv439(res12)
        res3 = self.relu(res3)
        res3 = self.conv440(res3)
        res = torch.add(res12,res3)
        res = self.sigmoid(res)
        res = torch.mul(res,id_LR)
        x = torch.add(id_ppo,res)
        #fin mRCAB 
        x = self.convRG8(x)
        x = torch.add(x,id10)
        # -- fin cada10 -- 


        #fin conexión 0-60
        #x = self.resize(x) 
        x = nn.functional.interpolate(x,scale_factor=(2,2,2),mode='trilinear') 
        x = torch.concat((x,id0_1),1)
        x = self.iconvRG4(x)
        x = self.ilrRG4(x)
        x = torch.add(x,id0_2)
        
        # inicio a mano 
        resA = self.conv441(x)
        resA = self.leackyrelu130(resA)
        
        res1 = self.pad(resA) 
        res1 = self.averagepool(res1)
        res2 = self.maxpool60(resA) 
        res3 = self.identidad(resA)
        
        res12 = torch.concat((res1,res2),1)
        res12 = self.conv442(res12)
        res12 = self.leackyrelu131(res12)
        res12 = self.conv443(res12)
        res12 = self.leackyrelu132(res12)
        #res12 = self.resize(res12)  
        res12 = nn.functional.interpolate(res12,scale_factor=(2,2,2),mode='trilinear') 
        
        res3 = self.conv444(res3)
        res3 = self.leackyrelu133(res3)
        
        resA = torch.add(res12,res3)
        resA = self.conv445(resA)
        resA = self.leackyrelu134(resA)
        resA = self.sigmoid(resA)
        
        resB = self.conv446(x)
        resB = self.leackyrelu135(resB)
        resB = self.conv447(resB)
        resB = self.leackyrelu136(resB) 
        
        resAB = torch.mul(resA,resB)
        resA = self.conv448(resA)
        resA = self.leackyrelu137(resA)
        resA = self.conv449(resA)
        
        x = torch.add(resAB, resA)
        # fin a mano 
        
        
        # -- inicio cada5 -- 
        id5 = self.identidad(x)


        #inicio mRCAB
        id_ppo = self.identidad(x)
        res = self.conv450(x)
        res = self.leackyrelu138(res)
        res = self.conv451(res)
        res = self.conv452(res)
        res = self.leackyrelu139(res)
        #res1 = self.globalaveragepool(res.shape[:2])
        size = tuple(res[0,0,:,:,:].shape)
        #print(size) 
        res1 = self.globalaveragepool3(res) 
        #print('-------------')
        #print(res1.shape)
        #res2 = self.globalmaxpool(res.shape[:2])
        res2 = self.globalmaxpool(res)
        #print(res2.shape)
        #print('-------------')
        res3 = self.conv453(res)
        id_LR = self.identidad(res)
        res12 = torch.concat((res1,res2),1)
        res12 = self.conv454(res12)
        res12 = self.relu(res12)
        res12 = self.conv455(res12)
        res3 = self.relu(res3)
        res3 = self.conv456(res3)
        res = torch.add(res12,res3)
        res = self.sigmoid(res)
        res = torch.mul(res,id_LR)
        x = torch.add(id_ppo,res)
        #fin mRCAB 

        #inicio mRCAB
        id_ppo = self.identidad(x)
        res = self.conv457(x)
        res = self.leackyrelu140(res)
        res = self.conv458(res)
        res = self.conv459(res)
        res = self.leackyrelu141(res)
        #res1 = self.globalaveragepool(res.shape[:2])
        size = tuple(res[0,0,:,:,:].shape)
        #print(size) 
        res1 = self.globalaveragepool3(res) 
        res2 = self.globalmaxpool(res)
        res3 = self.conv460(res)
        id_LR = self.identidad(res)
        res12 = torch.concat((res1,res2),1)
        res12 = self.conv461(res12)
        res12 = self.relu(res12)
        res12 = self.conv462(res12)
        res3 = self.relu(res3)
        res3 = self.conv463(res3)
        res = torch.add(res12,res3)
        res = self.sigmoid(res)
        res = torch.mul(res,id_LR)
        x = torch.add(id_ppo,res)
        #fin mRCAB 

        #inicio mRCAB
        id_ppo = self.identidad(x)
        res = self.conv464(x)
        res = self.leackyrelu142(res)
        res = self.conv465(res)
        res = self.conv466(res)
        res = self.leackyrelu143(res)
        #res1 = self.globalaveragepool(res.shape[:2])
        size = tuple(res[0,0,:,:,:].shape)
        #print(size) 
        res1 = self.globalaveragepool3(res) 
        res2 = self.globalmaxpool(res)
        res3 = self.conv467(res)
        id_LR = self.identidad(res)
        res12 = torch.concat((res1,res2),1)
        res12 = self.conv468(res12)
        res12 = self.relu(res12)
        res12 = self.conv469(res12)
        res3 = self.relu(res3)
        res3 = self.conv470(res3)
        res = torch.add(res12,res3)
        res = self.sigmoid(res)
        res = torch.mul(res,id_LR)
        x = torch.add(id_ppo,res)
        #fin mRCAB 

        #inicio mRCAB
        id_ppo = self.identidad(x)
        res = self.conv471(x)
        res = self.leackyrelu144(res)
        res = self.conv472(res)
        res = self.conv473(res)
        res = self.leackyrelu145(res)
        #res1 = self.globalaveragepool(res.shape[:2])
        size = tuple(res[0,0,:,:,:].shape)
        #print(size) 
        res1 = self.globalaveragepool3(res) 
        res2 = self.globalmaxpool(res)
        res3 = self.conv474(res)
        id_LR = self.identidad(res)
        res12 = torch.concat((res1,res2),1)
        res12 = self.conv475(res12)
        res12 = self.relu(res12)
        res12 = self.conv476(res12)
        res3 = self.relu(res3)
        res3 = self.conv477(res3)
        res = torch.add(res12,res3)
        res = self.sigmoid(res)
        res = torch.mul(res,id_LR)
        x = torch.add(id_ppo,res)
        #fin mRCAB 

        #inicio mRCAB
        id_ppo = self.identidad(x)
        res = self.conv478(x)
        res = self.leackyrelu146(res)
        res = self.conv479(res)
        res = self.conv480(res)
        res = self.leackyrelu147(res)
        #res1 = self.globalaveragepool(res.shape[:2])
        size = tuple(res[0,0,:,:,:].shape)
        #print(size) 
        res1 = self.globalaveragepool3(res) 
        res2 = self.globalmaxpool(res)
        res3 = self.conv481(res)
        id_LR = self.identidad(res)
        res12 = torch.concat((res1,res2),1)
        res12 = self.conv482(res12)
        res12 = self.relu(res12)
        res12 = self.conv483(res12)
        res3 = self.relu(res3)
        res3 = self.conv484(res3)
        res = torch.add(res12,res3)
        res = self.sigmoid(res)
        res = torch.mul(res,id_LR)
        x = torch.add(id_ppo,res)
        #fin mRCAB 
        x = self.convRG9(x)
        x = torch.add(x,id5)
        # -- fin cada5 -- 

        # -- inicio cada5 -- 
        id5 = self.identidad(x)


        #inicio mRCAB
        id_ppo = self.identidad(x)
        res = self.conv485(x)
        res = self.leackyrelu148(res)
        res = self.conv486(res)
        res = self.conv487(res)
        res = self.leackyrelu149(res)
        #res1 = self.globalaveragepool(res.shape[:2])
        size = tuple(res[0,0,:,:,:].shape)
        #print(size) 
        res1 = self.globalaveragepool3(res) 
        res2 = self.globalmaxpool(res)
        res3 = self.conv488(res)
        id_LR = self.identidad(res)
        res12 = torch.concat((res1,res2),1)
        res12 = self.conv489(res12)
        res12 = self.relu(res12)
        res12 = self.conv490(res12)
        res3 = self.relu(res3)
        res3 = self.conv491(res3)
        res = torch.add(res12,res3)
        res = self.sigmoid(res)
        res = torch.mul(res,id_LR)
        x = torch.add(id_ppo,res)
        #fin mRCAB 

        #inicio mRCAB
        id_ppo = self.identidad(x)
        res = self.conv492(x)
        res = self.leackyrelu150(res)
        res = self.conv493(res)
        res = self.conv494(res)
        res = self.leackyrelu151(res)
        #res1 = self.globalaveragepool(res.shape[:2])
        size = tuple(res[0,0,:,:,:].shape)
        #print(size) 
        res1 = self.globalaveragepool3(res) 
        res2 = self.globalmaxpool(res)
        res3 = self.conv495(res)
        id_LR = self.identidad(res)
        res12 = torch.concat((res1,res2),1)
        res12 = self.conv496(res12)
        res12 = self.relu(res12)
        res12 = self.conv497(res12)
        res3 = self.relu(res3)
        res3 = self.conv498(res3)
        res = torch.add(res12,res3)
        res = self.sigmoid(res)
        res = torch.mul(res,id_LR)
        x = torch.add(id_ppo,res)
        #fin mRCAB 

        #inicio mRCAB
        id_ppo = self.identidad(x)
        res = self.conv499(x)
        res = self.leackyrelu152(res)
        res = self.conv500(res)
        res = self.conv501(res)
        res = self.leackyrelu153(res)
        #res1 = self.globalaveragepool(res.shape[:2])
        size = tuple(res[0,0,:,:,:].shape)
        #print(size) 
        res1 = self.globalaveragepool3(res) 
        res2 = self.globalmaxpool(res)
        res3 = self.conv502(res)
        id_LR = self.identidad(res)
        res12 = torch.concat((res1,res2),1)
        res12 = self.conv503(res12)
        res12 = self.relu(res12)
        res12 = self.conv504(res12)
        res3 = self.relu(res3)
        res3 = self.conv505(res3)
        res = torch.add(res12,res3)
        res = self.sigmoid(res)
        res = torch.mul(res,id_LR)
        x = torch.add(id_ppo,res)
        #fin mRCAB 

        #inicio mRCAB
        id_ppo = self.identidad(x)
        res = self.conv506(x)
        res = self.leackyrelu154(res)
        res = self.conv507(res)
        res = self.conv508(res)
        res = self.leackyrelu155(res)
        #res1 = self.globalaveragepool(res.shape[:2])
        size = tuple(res[0,0,:,:,:].shape)
        #print(size) 
        res1 = self.globalaveragepool3(res) 
        res2 = self.globalmaxpool(res)
        res3 = self.conv509(res)
        id_LR = self.identidad(res)
        res12 = torch.concat((res1,res2),1)
        res12 = self.conv510(res12)
        res12 = self.relu(res12)
        res12 = self.conv511(res12)
        res3 = self.relu(res3)
        res3 = self.conv512(res3)
        res = torch.add(res12,res3)
        res = self.sigmoid(res)
        res = torch.mul(res,id_LR)
        x = torch.add(id_ppo,res)
        #fin mRCAB 

        #inicio mRCAB
        id_ppo = self.identidad(x)
        res = self.conv513(x)
        res = self.leackyrelu156(res)
        res = self.conv514(res)
        res = self.conv515(res)
        res = self.leackyrelu157(res)
        #res1 = self.globalaveragepool(res.shape[:2])
        size = tuple(res[0,0,:,:,:].shape)
        #print(size) 
        res1 = self.globalaveragepool3(res) 
        res2 = self.globalmaxpool(res)
        res3 = self.conv516(res)
        id_LR = self.identidad(res)
        res12 = torch.concat((res1,res2),1)
        res12 = self.conv517(res12)
        res12 = self.relu(res12)
        res12 = self.conv518(res12)
        res3 = self.relu(res3)
        res3 = self.conv519(res3)
        res = torch.add(res12,res3)
        res = self.sigmoid(res)
        res = torch.mul(res,id_LR)
        x = torch.add(id_ppo,res)
        #fin mRCAB 
        x = self.convRG10(x)
        x = torch.add(x,id5)
        # -- fin cada5 -- 

        # -- inicio cada5 -- 
        id5 = self.identidad(x)


        #inicio mRCAB
        id_ppo = self.identidad(x)
        res = self.conv520(x)
        res = self.leackyrelu158(res)
        res = self.conv521(res)
        res = self.conv522(res)
        res = self.leackyrelu159(res)
        #res1 = self.globalaveragepool(res.shape[:2])
        size = tuple(res[0,0,:,:,:].shape)
        #print(size) 
        res1 = self.globalaveragepool3(res) 
        res2 = self.globalmaxpool(res)
        res3 = self.conv523(res)
        id_LR = self.identidad(res)
        res12 = torch.concat((res1,res2),1)
        res12 = self.conv524(res12)
        res12 = self.relu(res12)
        res12 = self.conv525(res12)
        res3 = self.relu(res3)
        res3 = self.conv526(res3)
        res = torch.add(res12,res3)
        res = self.sigmoid(res)
        res = torch.mul(res,id_LR)
        x = torch.add(id_ppo,res)
        #fin mRCAB 

        #inicio mRCAB
        id_ppo = self.identidad(x)
        res = self.conv527(x)
        res = self.leackyrelu160(res)
        res = self.conv528(res)
        res = self.conv529(res)
        res = self.leackyrelu161(res)
        #res1 = self.globalaveragepool(res.shape[:2])
        size = tuple(res[0,0,:,:,:].shape)
        #print(size) 
        res1 = self.globalaveragepool3(res) 
        res2 = self.globalmaxpool(res)
        res3 = self.conv530(res)
        id_LR = self.identidad(res)
        res12 = torch.concat((res1,res2),1)
        res12 = self.conv531(res12)
        res12 = self.relu(res12)
        res12 = self.conv532(res12)
        res3 = self.relu(res3)
        res3 = self.conv533(res3)
        res = torch.add(res12,res3)
        res = self.sigmoid(res)
        res = torch.mul(res,id_LR)
        x = torch.add(id_ppo,res)
        #fin mRCAB 

        #inicio mRCAB
        id_ppo = self.identidad(x)
        res = self.conv534(x)
        res = self.leackyrelu162(res)
        res = self.conv535(res)
        res = self.conv536(res)
        res = self.leackyrelu163(res)
        #res1 = self.globalaveragepool(res.shape[:2])
        size = tuple(res[0,0,:,:,:].shape)
        #print(size) 
        res1 = self.globalaveragepool3(res) 
        res2 = self.globalmaxpool(res)
        res3 = self.conv537(res)
        id_LR = self.identidad(res)
        res12 = torch.concat((res1,res2),1)
        res12 = self.conv538(res12)
        res12 = self.relu(res12)
        res12 = self.conv539(res12)
        res3 = self.relu(res3)
        res3 = self.conv540(res3)
        res = torch.add(res12,res3)
        res = self.sigmoid(res)
        res = torch.mul(res,id_LR)
        x = torch.add(id_ppo,res)
        #fin mRCAB 

        #inicio mRCAB
        id_ppo = self.identidad(x)
        res = self.conv541(x)
        res = self.leackyrelu164(res)
        res = self.conv542(res)
        res = self.conv543(res)
        res = self.leackyrelu165(res)
        #res1 = self.globalaveragepool(res.shape[:2])
        size = tuple(res[0,0,:,:,:].shape)
        #print(size) 
        res1 = self.globalaveragepool3(res) 
        res2 = self.globalmaxpool(res)
        res3 = self.conv544(res)
        id_LR = self.identidad(res)
        res12 = torch.concat((res1,res2),1)
        res12 = self.conv545(res12)
        res12 = self.relu(res12)
        res12 = self.conv546(res12)
        res3 = self.relu(res3)
        res3 = self.conv547(res3)
        res = torch.add(res12,res3)
        res = self.sigmoid(res)
        res = torch.mul(res,id_LR)
        x = torch.add(id_ppo,res)
        #fin mRCAB 

        #inicio mRCAB
        id_ppo = self.identidad(x)
        res = self.conv548(x)
        res = self.leackyrelu166(res)
        res = self.conv549(res)
        res = self.conv550(res)
        res = self.leackyrelu167(res)
        #res1 = self.globalaveragepool(res.shape[:2])
        size = tuple(res[0,0,:,:,:].shape)
        #print(size) 
        res1 = self.globalaveragepool3(res) 
        res2 = self.globalmaxpool(res)
        res3 = self.conv551(res)
        id_LR = self.identidad(res)
        res12 = torch.concat((res1,res2),1)
        res12 = self.conv552(res12)
        res12 = self.relu(res12)
        res12 = self.conv553(res12)
        res3 = self.relu(res3)
        res3 = self.conv554(res3)
        res = torch.add(res12,res3)
        res = self.sigmoid(res)
        res = torch.mul(res,id_LR)
        x = torch.add(id_ppo,res)
        #fin mRCAB 
        x = self.convRG11(x)
        x = torch.add(x,id5)
        # -- fin cada5 -- 

        # -- inicio cada5 -- 
        id5 = self.identidad(x)


        #inicio mRCAB
        id_ppo = self.identidad(x)
        res = self.conv555(x)
        res = self.leackyrelu168(res)
        res = self.conv556(res)
        res = self.conv557(res)
        res = self.leackyrelu169(res)
        #res1 = self.globalaveragepool(res.shape[:2])
        size = tuple(res[0,0,:,:,:].shape)
        #print(size) 
        res1 = self.globalaveragepool3(res) 
        res2 = self.globalmaxpool(res)
        res3 = self.conv558(res)
        id_LR = self.identidad(res)
        res12 = torch.concat((res1,res2),1)
        res12 = self.conv559(res12)
        res12 = self.relu(res12)
        res12 = self.conv560(res12)
        res3 = self.relu(res3)
        res3 = self.conv561(res3)
        res = torch.add(res12,res3)
        res = self.sigmoid(res)
        res = torch.mul(res,id_LR)
        x = torch.add(id_ppo,res)
        #fin mRCAB 

        #inicio mRCAB
        id_ppo = self.identidad(x)
        res = self.conv562(x)
        res = self.leackyrelu170(res)
        res = self.conv563(res)
        res = self.conv564(res)
        res = self.leackyrelu171(res)
        #res1 = self.globalaveragepool(res.shape[:2])
        size = tuple(res[0,0,:,:,:].shape)
        #print(size) 
        res1 = self.globalaveragepool3(res) 
        res2 = self.globalmaxpool(res)
        res3 = self.conv565(res)
        id_LR = self.identidad(res)
        res12 = torch.concat((res1,res2),1)
        res12 = self.conv566(res12)
        res12 = self.relu(res12)
        res12 = self.conv567(res12)
        res3 = self.relu(res3)
        res3 = self.conv568(res3)
        res = torch.add(res12,res3)
        res = self.sigmoid(res)
        res = torch.mul(res,id_LR)
        x = torch.add(id_ppo,res)
        #fin mRCAB 

        #inicio mRCAB
        id_ppo = self.identidad(x)
        res = self.conv569(x)
        res = self.leackyrelu172(res)
        res = self.conv570(res)
        res = self.conv571(res)
        res = self.leackyrelu173(res)
        #res1 = self.globalaveragepool(res.shape[:2])
        size = tuple(res[0,0,:,:,:].shape)
        #print(size) 
        res1 = self.globalaveragepool3(res) 
        res2 = self.globalmaxpool(res)
        res3 = self.conv572(res)
        id_LR = self.identidad(res)
        res12 = torch.concat((res1,res2),1)
        res12 = self.conv573(res12)
        res12 = self.relu(res12)
        res12 = self.conv574(res12)
        res3 = self.relu(res3)
        res3 = self.conv575(res3)
        res = torch.add(res12,res3)
        res = self.sigmoid(res)
        res = torch.mul(res,id_LR)
        x = torch.add(id_ppo,res)
        #fin mRCAB 

        #inicio mRCAB
        id_ppo = self.identidad(x)
        res = self.conv576(x)
        res = self.leackyrelu174(res)
        res = self.conv577(res)
        res = self.conv578(res)
        res = self.leackyrelu175(res)
        #res1 = self.globalaveragepool(res.shape[:2])
        size = tuple(res[0,0,:,:,:].shape)
        #print(size) 
        res1 = self.globalaveragepool3(res) 
        res2 = self.globalmaxpool(res)
        res3 = self.conv579(res)
        id_LR = self.identidad(res)
        res12 = torch.concat((res1,res2),1)
        res12 = self.conv580(res12)
        res12 = self.relu(res12)
        res12 = self.conv581(res12)
        res3 = self.relu(res3)
        res3 = self.conv582(res3)
        res = torch.add(res12,res3)
        res = self.sigmoid(res)
        res = torch.mul(res,id_LR)
        x = torch.add(id_ppo,res)
        #fin mRCAB 

        #inicio mRCAB
        id_ppo = self.identidad(x)
        res = self.conv583(x)
        res = self.leackyrelu176(res)
        res = self.conv584(res)
        res = self.conv585(res)
        res = self.leackyrelu177(res)
        #res1 = self.globalaveragepool(res.shape[:2])
        size = tuple(res[0,0,:,:,:].shape)
        #print(size) 
        res1 = self.globalaveragepool3(res) 
        res2 = self.globalmaxpool(res)
        res3 = self.conv586(res)
        id_LR = self.identidad(res)
        res12 = torch.concat((res1,res2),1)
        res12 = self.conv587(res12)
        res12 = self.relu(res12)
        res12 = self.conv588(res12)
        res3 = self.relu(res3)
        res3 = self.conv589(res3)
        res = torch.add(res12,res3)
        res = self.sigmoid(res)
        res = torch.mul(res,id_LR)
        x = torch.add(id_ppo,res)
        #fin mRCAB 
        x = self.convRG12(x)
        x = torch.add(x,id5)
        # -- fin cada5 -- 

        # ESCRITO A MANO 
        res = self.conv590(x) 
        res_shape = torch.tensor(res.shape) 

        res1 = torch.gather(res_shape,0,torch.tensor([0])) 
        res1A = torch.unsqueeze(res1,0)
        res1B = torch.unsqueeze(res1,0)

        res2 = torch.gather(res_shape,0,torch.tensor([1])) 
        res2 = torch.div(res2, 8) 
        res2 = res2.to(dtype=torch.int64) 
        res2 = res2.to(dtype=torch.int64) 
        res2A = torch.unsqueeze(res2,0)
        res2B = torch.unsqueeze(res2,0) 

        res3 = torch.gather(res_shape,0,torch.tensor([2])) 
        res3A = torch.unsqueeze(res3,0)
        res3B = torch.mul(res3,2)
        res3B = torch.unsqueeze(res3B,0)

        res4 = torch.gather(res_shape,0,torch.tensor([3])) 
        res4A = torch.unsqueeze(res4,0)
        res4B = torch.mul(res4,2)
        res4B = torch.unsqueeze(res4B,0)

        res5 = torch.gather(res_shape,0,torch.tensor([4])) 
        res5A = torch.unsqueeze(res5,0)
        res5B = torch.mul(res5,2)
        res5B = torch.unsqueeze(res5B,0) 

        resA = torch.concat((res1A,res2A,res3A,res4A,res5A),0) # (1,64,28,120,120)
        resB = torch.concat((res1B,res2B,res3B,res4B,res5B),0)

        resA = (-1,2,2,2,64,28,120,120) 
        # mari -> en concat tienes una entrada que es (2,2,2),
        # y en permute tienes una tupla de 8, que son las 
        # dimensiones que tiene que tener tu tensor de entrada 
        resB = tuple(resB) 

        resA = torch.reshape(res, resA)
        resA = torch.permute(resA,(0, 1, 5, 2, 6, 3, 7, 4))

        res = torch.reshape(resA, resB) 
        res = self.conv591(res) 

        res_final1 = self.conv592(ID_final)
        res_final1 = torch.reshape(res_final1, tuple(torch.tensor([-1,64,2,2,2,28,120,120], dtype=torch.int64))) 
        res_final1 = torch.permute(res_final1,(0, 1, 5, 2, 6, 3, 7, 4))
        res_final1 = torch.reshape(res_final1, tuple(torch.tensor([-1,64,56,240,240], dtype=torch.int64)))  
        res_final1 = self.conv593(res_final1) 

        f = torch.add(res,res_final1)

        #res_final2 = self.resize(ID_final) 
        res_final2 = nn.functional.interpolate(ID_final,scale_factor=(2,2,2),mode='trilinear') 
        

        final = torch.add(f, res_final2)

        return final 
        



